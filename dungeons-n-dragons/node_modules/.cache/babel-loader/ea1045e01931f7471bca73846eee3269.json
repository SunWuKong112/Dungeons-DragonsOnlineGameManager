{"ast":null,"code":"function submitDecree(e) {\n  e.preventDefault();\n  const decreeTemp = decreeRef.current.value.toLowerCase();\n  const decreeArray = decreeTemp.split(\" \");\n\n  switch (decreeArray[0]) {\n    case \"roll\":\n      const dice = decreeArray[1].split(\"d\");\n      const numOfDice = dice[0];\n      const numOfSides = dice[1];\n      let dieRollArray = [];\n      let sum = 0;\n      const rollRam = [];\n\n      for (let i = numOfDice; i--; i > 0) {\n        var random = Math.round(Math.random() * numOfSides - 1) + 1;\n        rollRam.push(random);\n        dieRollArray.push(`d${numOfSides}: ${random}`);\n        sum += parseInt(random);\n      }\n\n      if (decreeArray[2] === \"drop\") {\n        let dropped;\n\n        switch (decreeArray[3]) {\n          case \"lowest\":\n            let lowest = sum;\n\n            for (let i = 0; i < rollRam.length; i++) {\n              if (rollRam[i] < lowest) {\n                lowest = rollRam[i];\n              }\n            }\n\n            console.log(lowest, dieRollArray);\n            dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n            sum = sum - lowest;\n            break;\n\n          case \"highest\":\n            let highest = 0;\n\n            for (let i = 0; i < rollRam.length; i++) {\n              if (rollRam[i] > highest) {\n                highest = rollRam[i];\n              }\n            }\n\n            dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n            sum = sum - highest;\n            break;\n\n          default:\n            break;\n        }\n\n        dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n      }\n\n      dieRollArray.push(`sum: ${sum}`);\n      const value = dieRollArray;\n      setRoyalDecrees([...royalDecrees, {\n        \"text\": decreeRef.current.value,\n        \"value\": value\n      }]);\n      break;\n\n    case \"banana\":\n      var name = decreeArray[1];\n      name = capitalize(name);\n      setRoyalDecrees([...royalDecrees, {\n        \"text\": `${name} is bananas`\n      }]);\n      break;\n\n    default:\n      setRoyalDecrees([...royalDecrees, {\n        \"text\": \"Not a valid decree.\"\n      }]);\n  }\n\n  decreeRef.current.value = \"\";\n}\n\n;\nexport default submitDecree;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/dungeons-n-dragons/src/functions/index.js"],"names":["submitDecree","e","preventDefault","decreeTemp","decreeRef","current","value","toLowerCase","decreeArray","split","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","i","random","Math","round","push","parseInt","dropped","lowest","length","console","log","indexOf","highest","setRoyalDecrees","royalDecrees","name","capitalize"],"mappings":"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","sourcesContent":["function submitDecree(e){\r\n     e.preventDefault();\r\n     const decreeTemp = decreeRef.current.value.toLowerCase();\r\n     const decreeArray = decreeTemp.split(\" \");\r\n     switch(decreeArray[0]){\r\n          case\"roll\":\r\n               const dice = decreeArray[1].split(\"d\");\r\n               const numOfDice = dice[0]\r\n               const numOfSides = dice[1];\r\n               let dieRollArray=[];\r\n               let sum=0;\r\n               const rollRam = [];\r\n               for(let i = numOfDice; i--; i > 0)\r\n               {\r\n                    var random = Math.round(Math.random()*numOfSides-1)+1;\r\n                    rollRam.push(random);\r\n                    dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                    sum+=parseInt(random);\r\n               }\r\n               if(decreeArray[2] === \"drop\"){\r\n                    let dropped;\r\n                    switch(decreeArray[3]){\r\n                         case \"lowest\":\r\n                              let lowest = sum;\r\n                              for(let i = 0; i < rollRam.length; i++){\r\n                                   if(rollRam[i] < lowest){\r\n                                        lowest = rollRam[i];\r\n                                   }\r\n                              }\r\n                              console.log(lowest, dieRollArray);\r\n                              dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                              sum = sum - lowest;\r\n                              break;\r\n                         case \"highest\":\r\n                              let highest = 0;\r\n                              for(let i = 0; i < rollRam.length; i++){\r\n                                   if(rollRam[i] > highest){\r\n                                        highest = rollRam[i];\r\n                                   }\r\n                              }\r\n                              dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                              sum = sum - highest;\r\n                              break;\r\n                         default:\r\n                              break;\r\n                    }\r\n                    dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n               }\r\n               dieRollArray.push(`sum: ${sum}`);\r\n               const value = dieRollArray;\r\n               setRoyalDecrees([...royalDecrees,\r\n                    {\r\n                         \"text\": decreeRef.current.value,\r\n                         \"value\":value\r\n                    }\r\n               ])\r\n               break;\r\n          case\"banana\":\r\n               var name = decreeArray[1];\r\n               name = capitalize(name);\r\n               setRoyalDecrees([...royalDecrees,\r\n                    {\r\n                         \"text\":`${name} is bananas`\r\n                    }\r\n               ])\r\n               break;\r\n          default: \r\n               setRoyalDecrees([...royalDecrees,\r\n                    {\r\n                         \"text\": \"Not a valid decree.\",\r\n                    }\r\n               ])\r\n     }\r\n     decreeRef.current.value = \"\";\r\n};\r\n\r\nexport default submitDecree;"]},"metadata":{},"sourceType":"module"}
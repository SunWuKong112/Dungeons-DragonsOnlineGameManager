{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyleg\\\\OneDrive\\\\Documents\\\\Coding Boot Camp\\\\Homework\\\\Dungeons-DragonsOnlineGameManager\\\\dungeons-n-dragons\\\\src\\\\pages\\\\DmGamePage.js\";\nimport React, { useRef, useState } from \"react\";\n\nfunction RenderDungeon() {\n  const [royalDecrees, setRoyalDecrees] = useState([]);\n  const [characters, setCharacters] = useState([\"Arnold\", \"Tiffany\", \"Kurt\", \"Ass\"]);\n  const decreeRef = useRef();\n\n  function capitalize(word) {\n    word = word.split(\"\");\n    word[0] = word[0].toUpperCase();\n    return word.join(\"\");\n  }\n\n  function spellFailed() {\n    const randomEvents = [\"You've just turned a player into a toad.\", \"Is... Is that a tiny rain cloud floating over your head...?\", \"Oh.... now your hair is on fire...\", \"RandomEvent4.\"];\n    const length = randomEvents.length;\n    const randomEvent = Math.round(Math.random() * length);\n    return `${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\n  }\n\n  function submitDecree(e) {\n    e.preventDefault();\n    const decreeTemp = decreeRef.current.value.toLowerCase();\n    const decreeArray = decreeTemp.split(\" \");\n\n    switch (decreeArray[0]) {\n      case \"roll\":\n        const dice = decreeArray[1].split(\"d\");\n        const numOfDice = dice[0];\n        const numOfSides = dice[1];\n        let dieRollArray = [];\n        let sum = 0;\n        const rollRam = [];\n\n        for (let i = numOfDice; i--; i > 0) {\n          var random = Math.floor(Math.random() * numOfSides + 1);\n          rollRam.push(random);\n          dieRollArray.push(`d${numOfSides}: ${random}`);\n          sum += parseInt(random);\n        }\n\n        if (decreeArray[2] === \"drop\") {\n          let dropped;\n\n          switch (decreeArray[3]) {\n            case \"lowest\":\n              let lowest = sum;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] < lowest) {\n                  lowest = rollRam[i];\n                }\n              }\n\n              console.log(lowest, dieRollArray);\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n              sum = sum - lowest;\n              break;\n\n            case \"highest\":\n              let highest = 0;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] > highest) {\n                  highest = rollRam[i];\n                }\n              }\n\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n              sum = sum - highest;\n              break;\n\n            default:\n              break;\n          }\n\n          dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n        }\n\n        dieRollArray.push(`sum: ${sum}`);\n        const value = dieRollArray;\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": decreeRef.current.value,\n          \"value\": value\n        }]);\n        break;\n\n      case \"abucus\":\n      case \"calculate\":\n        var result;\n        var equation;\n        var firstNum;\n        var calculus;\n        var secNum;\n\n        if (decreeArray[1]) {\n          equation = decreeArray[1].split(\"\");\n          firstNum = parseInt(equation[0]);\n          calculus = equation[1];\n          secNum = parseInt(equation[2]);\n        }\n\n        switch (calculus) {\n          case \"+\":\n          case \"plus\":\n            result = parseInt(firstNum + secNum);\n            break;\n\n          case \"-\":\n          case \"minus\":\n            result = parseInt(firstNum - secNum);\n            break;\n\n          case \"*\":\n          case \"x\":\n          case \"multiplied by\":\n            result = parseInt(firstNum * secNum);\n            break;\n\n          default:\n            result = spellFailed();\n        }\n\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": result\n        }]);\n        break;\n\n      case \"banana\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is bananas!`\n        }]);\n        break;\n\n      case \"troglodyte\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is an uneducated troglodyte.`\n        }]);\n        break;\n\n      case \"action\":\n      case \"action:\":\n        let subject;\n\n        for (let i = 0; i < characters.length; i++) {\n          if (decreeArray[1] === characters[i]) {\n            subject = capitalize(characters[i]);\n          }\n        }\n\n        if (subject) {\n          switch (decreeArray[2]) {\n            case \"attack\":\n            case \"attacks\":\n            case \"attacked\":\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": `${subject} attacked object`\n              }]);\n              break;\n          }\n        } else {\n          setRoyalDecrees([...royalDecrees, {}]);\n        }\n\n        break;\n\n      default:\n        const decreeFailed = spellFailed();\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": decreeFailed\n        }]);\n    } // saveData(royalDecrees[royalDecrees.length]);\n\n\n    decreeRef.current.value = \"\";\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scroll-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"scroll-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 16\n    }\n  }, \"Decree Scroll\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"decree-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }\n  }, royalDecrees.map((decree, index) => {\n    if (index >= royalDecrees.length - 5) return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 36\n      }\n    }, decree.text), decree.value ? decree.value.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 46\n        }\n      }, value);\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 41\n      }\n    }));else return null;\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitDecree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"col-12 decree-box\",\n    name: \"DecreeBox\",\n    ref: decreeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 16\n    }\n  })));\n}\n\nexport default RenderDungeon;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/dungeons-n-dragons/src/pages/DmGamePage.js"],"names":["React","useRef","useState","RenderDungeon","royalDecrees","setRoyalDecrees","characters","setCharacters","decreeRef","capitalize","word","split","toUpperCase","join","spellFailed","randomEvents","length","randomEvent","Math","round","random","submitDecree","e","preventDefault","decreeTemp","current","value","toLowerCase","decreeArray","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","i","floor","push","parseInt","dropped","lowest","console","log","indexOf","highest","result","equation","firstNum","calculus","secNum","name","subject","decreeFailed","map","decree","index","text"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\n\r\nfunction RenderDungeon(){\r\n     const [royalDecrees, setRoyalDecrees] = useState([]);\r\n     const [characters, setCharacters] = useState([\"Arnold\",\"Tiffany\",\"Kurt\",\"Ass\"]);\r\n     const decreeRef = useRef();\r\n     function capitalize(word){\r\n          word = word.split(\"\");\r\n          word[0] = word[0].toUpperCase();\r\n          return word.join(\"\");\r\n     }\r\n     function spellFailed(){\r\n          const randomEvents = [\"You've just turned a player into a toad.\",\"Is... Is that a tiny rain cloud floating over your head...?\",\"Oh.... now your hair is on fire...\",\"RandomEvent4.\"];\r\n          const length = randomEvents.length;\r\n          const randomEvent = Math.round(Math.random()*length);\r\n          return`${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\r\n     }\r\n     function submitDecree(e){\r\n          e.preventDefault();\r\n          const decreeTemp = decreeRef.current.value.toLowerCase();\r\n          const decreeArray = decreeTemp.split(\" \");\r\n          switch(decreeArray[0]){\r\n               case\"roll\":\r\n                    const dice = decreeArray[1].split(\"d\");\r\n                    const numOfDice = dice[0]\r\n                    const numOfSides = dice[1];\r\n                    let dieRollArray=[];\r\n                    let sum=0;\r\n                    const rollRam = [];\r\n                    for(let i = numOfDice; i--; i > 0)\r\n                    {\r\n                         var random = Math.floor((Math.random() * numOfSides) + 1);\r\n                         rollRam.push(random);\r\n                         dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                         sum+=parseInt(random);\r\n                    }\r\n                    if(decreeArray[2] === \"drop\"){\r\n                         let dropped;\r\n                         switch(decreeArray[3]){\r\n                              case \"lowest\":\r\n                                   let lowest = sum;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] < lowest){\r\n                                             lowest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   console.log(lowest, dieRollArray);\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                                   sum = sum - lowest;\r\n                                   break;\r\n                              case \"highest\":\r\n                                   let highest = 0;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] > highest){\r\n                                             highest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                                   sum = sum - highest;\r\n                                   break;\r\n                              default:\r\n                                   break;\r\n                         }\r\n                         dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n                    }\r\n                    dieRollArray.push(`sum: ${sum}`);\r\n                    const value = dieRollArray;\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": decreeRef.current.value,\r\n                              \"value\":value\r\n                         }\r\n                    ])\r\n                    break;\r\n               case\"abucus\":\r\n               case\"calculate\":\r\n                    var result;\r\n                    var equation;\r\n                    var firstNum;\r\n                    var calculus;\r\n                    var secNum;\r\n                    if(decreeArray[1]){\r\n                         equation = decreeArray[1].split(\"\");\r\n                         firstNum = parseInt(equation[0]);\r\n                         calculus = equation[1];\r\n                         secNum = parseInt(equation[2]);\r\n                    }\r\n                    switch(calculus){\r\n                         case\"+\":\r\n                         case\"plus\":\r\n                              result = parseInt(firstNum+secNum);\r\n                              break;\r\n                         case\"-\":\r\n                         case\"minus\":\r\n                              result = parseInt(firstNum-secNum);\r\n                              break;\r\n                         case\"*\":\r\n                         case\"x\":\r\n                         case\"multiplied by\":\r\n                              result = parseInt(firstNum*secNum);\r\n                              break;\r\n                         default:\r\n                              result = spellFailed();\r\n                         }\r\n                         setRoyalDecrees([...royalDecrees,\r\n                              {\r\n                                   \"text\":result\r\n                              }\r\n                         ])\r\n                    break;\r\n               case\"banana\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is bananas!`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"troglodyte\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is an uneducated troglodyte.`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"action\":\r\n               case\"action:\":\r\n                    let subject;\r\n                    for(let i = 0; i < characters.length; i++){\r\n                         if(decreeArray[1] === characters[i]){\r\n                              subject = capitalize(characters[i]);\r\n                         }\r\n                    }\r\n                    if(subject){\r\n                         switch(decreeArray[2]){\r\n                              case\"attack\":\r\n                              case\"attacks\":\r\n                              case\"attacked\":\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":`${subject} attacked object`\r\n                                   }]);\r\n                                   break;\r\n\r\n                         }\r\n                    }\r\n                    else{\r\n                         setRoyalDecrees([...royalDecrees,\r\n                         {\r\n\r\n                         }]);\r\n                    }\r\n                    break;\r\n               default:\r\n                    const decreeFailed = spellFailed();\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": decreeFailed\r\n                         }\r\n                    ]);\r\n          }\r\n          // saveData(royalDecrees[royalDecrees.length]);\r\n          decreeRef.current.value = \"\";\r\n     };\r\n     return(\r\n          <div className=\"scroll-container\">\r\n               <h1 className=\"scroll-heading\">Decree Scroll</h1>\r\n               <div className=\"decree-scroll\">\r\n                    {royalDecrees.map((decree, index)=>{\r\n                    if(index >= royalDecrees.length-5)\r\n                         return(\r\n                              <div key={index}>\r\n                                   <p className=\"text-align-left\">{decree.text}</p>\r\n                                   {decree.value ? decree.value.map((value)=>{\r\n                                        return(\r\n                                             <div>\r\n                                                  {value}\r\n                                             </div>\r\n                                        );\r\n                                   }) : <p></p>}\r\n                              </div>\r\n                         )\r\n                         else return null;\r\n                    })}\r\n               </div>\r\n          <form onSubmit={submitDecree}>\r\n               <input className=\"col-12 decree-box\" name=\"DecreeBox\" ref={decreeRef} />\r\n          </form>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default RenderDungeon;"]},"metadata":{},"sourceType":"module"}
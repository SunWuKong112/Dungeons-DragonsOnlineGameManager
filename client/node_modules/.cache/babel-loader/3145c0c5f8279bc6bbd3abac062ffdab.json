{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyleg\\\\OneDrive\\\\Documents\\\\Coding Boot Camp\\\\Homework\\\\Dungeons-DragonsOnlineGameManager\\\\dungeons-n-dragons\\\\src\\\\pages\\\\DmGamePage.js\";\nimport React, { useRef, useState } from \"react\";\n\nfunction RenderDungeon() {\n  const [royalDecrees, setRoyalDecrees] = useState([]);\n  const [party, setParty] = useState([\"arnold\", \"tiffany\", \"kurt\", \"ass\", \"assballs69\"]);\n  const [NPCs, setNPCs] = useState([{\n    \"Name\": \"reginald\",\n    \"isHostile\": false\n  }, {\n    \"Name\": \"general_zod\",\n    \"isHostile\": true\n  }]);\n  const decreeRef = useRef();\n\n  function capitalize(word) {\n    let wordStore = [];\n    let wordFragment;\n    word = word.split(\"_\");\n\n    for (let i = 0; i < word.length; i++) {\n      wordFragment = word[i].split(\"\");\n      wordFragment[0] = wordFragment[0].toUpperCase();\n      wordFragment = wordFragment.join(\"\");\n      wordStore.push(wordFragment);\n    }\n\n    return wordStore.join(\"_\");\n  }\n\n  function spellFailed() {\n    const randomEvents = [\"You've just turned a player into a toad.\", \"Is... Is that a tiny rain cloud floating over your head...?\", \"Oh.... now your hair is on fire...\", \"RandomEvent4.\"];\n    const length = randomEvents.length;\n    const randomEvent = Math.round(Math.random() * length);\n    const decreefailed = `${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\n    setRoyalDecrees([...royalDecrees, {\n      \"text\": decreefailed\n    }]);\n  }\n\n  function submitDecree(e) {\n    e.preventDefault();\n    const decreeTemp = decreeRef.current.value.toLowerCase();\n    const decreeArray = decreeTemp.split(\" \");\n\n    switch (decreeArray[0]) {\n      case \"roll\":\n        const dice = decreeArray[1].split(\"d\");\n        const numOfDice = dice[0];\n        const numOfSides = dice[1];\n        let dieRollArray = [];\n        let sum = 0;\n        const rollRam = [];\n\n        for (let i = numOfDice; i--; i > 0) {\n          var random = Math.floor(Math.random() * numOfSides + 1);\n          rollRam.push(random);\n          dieRollArray.push(`d${numOfSides}: ${random}`);\n          sum += parseInt(random);\n        }\n\n        if (decreeArray[2] === \"drop\") {\n          let dropped;\n\n          switch (decreeArray[3]) {\n            case \"lowest\":\n              let lowest = sum;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] < lowest) {\n                  lowest = rollRam[i];\n                }\n              }\n\n              console.log(lowest, dieRollArray);\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n              sum = sum - lowest;\n              break;\n\n            case \"highest\":\n              let highest = 0;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] > highest) {\n                  highest = rollRam[i];\n                }\n              }\n\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n              sum = sum - highest;\n              break;\n\n            default:\n              break;\n          }\n\n          dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n        }\n\n        dieRollArray.push(`sum: ${sum}`);\n        const value = dieRollArray;\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": decreeRef.current.value,\n          \"value\": value\n        }]);\n        break;\n\n      case \"add\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                const newPlayer = decreeArray[3];\n\n                if (party.includes(newCharacter)) {\n                  const value = `${capitalize(newPlayer)} is already a member of your party.`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                } else {\n                  const value = `New player character: ${capitalize(newCharacter)}`;\n                  setParty([...characters, {\n                    \"name\": newCharacter\n                  }]);\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...characters, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"abucus\":\n      case \"calculate\":\n        var result;\n        var equation;\n        var firstNum;\n        var calculus;\n        var secNum;\n\n        if (decreeArray[1]) {\n          equation = decreeArray[1].split(\"\");\n          firstNum = parseInt(equation[0]);\n          calculus = equation[1];\n          secNum = parseInt(equation[2]);\n        }\n\n        switch (calculus) {\n          case \"+\":\n          case \"plus\":\n            result = parseInt(firstNum + secNum);\n            break;\n\n          case \"-\":\n          case \"minus\":\n            result = parseInt(firstNum - secNum);\n            break;\n\n          case \"*\":\n          case \"x\":\n          case \"multiplied by\":\n            result = parseInt(firstNum * secNum);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        if (result) {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": result\n          }]);\n        }\n\n        break;\n\n      case \"banana\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is bananas!`\n        }]);\n        break;\n\n      case \"troglodyte\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is an uneducated troglodyte.`\n        }]);\n        break;\n\n      case \"action\":\n      case \"action:\":\n        let subject;\n\n        for (let i = 0; i < characters.length; i++) {\n          if (decreeArray[1] === characters[i]) {\n            subject = capitalize(characters[i]);\n          }\n        }\n\n        if (subject) {\n          switch (decreeArray[2]) {\n            case \"attack\":\n            case \"attacks\":\n            case \"attacked\":\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": `${subject} attacked ` + \"${object}\"\n              }]);\n              break;\n          }\n        } else {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": `${capitalize(decreeArray[1])} is not a player`\n          }]);\n        }\n\n        break;\n\n      default:\n        spellFailed();\n    } // saveData(royalDecrees[royalDecrees.length]);\n\n\n    decreeRef.current.value = \"\";\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scroll-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"scroll-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 16\n    }\n  }, \"Decree Scroll\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"decree-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 16\n    }\n  }, royalDecrees.map((decree, index) => {\n    if (index >= royalDecrees.length - 5) return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 36\n      }\n    }, decree.text), decree.value ? decree.value.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 46\n        }\n      }, value);\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 41\n      }\n    }));else return null;\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitDecree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"col-12 decree-box\",\n    name: \"DecreeBox\",\n    ref: decreeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 16\n    }\n  })));\n}\n\nexport default RenderDungeon;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/dungeons-n-dragons/src/pages/DmGamePage.js"],"names":["React","useRef","useState","RenderDungeon","royalDecrees","setRoyalDecrees","party","setParty","NPCs","setNPCs","decreeRef","capitalize","word","wordStore","wordFragment","split","i","length","toUpperCase","join","push","spellFailed","randomEvents","randomEvent","Math","round","random","decreefailed","submitDecree","e","preventDefault","decreeTemp","current","value","toLowerCase","decreeArray","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","floor","parseInt","dropped","lowest","console","log","indexOf","highest","newPlayer","includes","newCharacter","characters","newNPC","result","equation","firstNum","calculus","secNum","name","subject","map","decree","index","text"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\n\r\nfunction RenderDungeon(){\r\n     const [royalDecrees, setRoyalDecrees] = useState([]);\r\n     const [party, setParty] = useState([\"arnold\",\"tiffany\",\"kurt\",\"ass\",\"assballs69\"]);\r\n     const [NPCs, setNPCs] = useState([{\"Name\":\"reginald\",\"isHostile\":false},{\"Name\":\"general_zod\",\"isHostile\":true}]);\r\n     const decreeRef = useRef();\r\n\r\n     function capitalize(word){\r\n          let wordStore=[];\r\n          let wordFragment;\r\n          word = word.split(\"_\");\r\n          for(let i = 0; i < word.length; i++){\r\n               wordFragment = word[i].split(\"\");\r\n               wordFragment[0] = wordFragment[0].toUpperCase();\r\n               wordFragment = wordFragment.join(\"\");\r\n               wordStore.push(wordFragment);\r\n          }\r\n          return wordStore.join(\"_\");\r\n     }\r\n     \r\n     function spellFailed(){\r\n          const randomEvents = [\"You've just turned a player into a toad.\",\"Is... Is that a tiny rain cloud floating over your head...?\",\"Oh.... now your hair is on fire...\",\"RandomEvent4.\"];\r\n          const length = randomEvents.length;\r\n          const randomEvent = Math.round(Math.random()*length);\r\n          const decreefailed = `${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\r\n          setRoyalDecrees([...royalDecrees,\r\n               {\r\n                    \"text\":decreefailed\r\n               }]);\r\n     }\r\n     \r\n     function submitDecree(e){\r\n          e.preventDefault();\r\n          const decreeTemp = decreeRef.current.value.toLowerCase();\r\n          const decreeArray = decreeTemp.split(\" \");\r\n          switch(decreeArray[0]){\r\n               case\"roll\":\r\n                    const dice = decreeArray[1].split(\"d\");\r\n                    const numOfDice = dice[0]\r\n                    const numOfSides = dice[1];\r\n                    let dieRollArray=[];\r\n                    let sum=0;\r\n                    const rollRam = [];\r\n                    for(let i = numOfDice; i--; i > 0)\r\n                    {\r\n                         var random = Math.floor((Math.random() * numOfSides) + 1);\r\n                         rollRam.push(random);\r\n                         dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                         sum+=parseInt(random);\r\n                    }\r\n                    if(decreeArray[2] === \"drop\"){\r\n                         let dropped;\r\n                         switch(decreeArray[3]){\r\n                              case \"lowest\":\r\n                                   let lowest = sum;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] < lowest){\r\n                                             lowest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   console.log(lowest, dieRollArray);\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                                   sum = sum - lowest;\r\n                                   break;\r\n                              case \"highest\":\r\n                                   let highest = 0;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] > highest){\r\n                                             highest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                                   sum = sum - highest;\r\n                                   break;\r\n                              default:\r\n                                   break;\r\n                         }\r\n                         dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n                    }\r\n                    dieRollArray.push(`sum: ${sum}`);\r\n                    const value = dieRollArray;\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": decreeRef.current.value,\r\n                              \"value\":value\r\n                         }\r\n                    ])\r\n                    break;\r\n               case\"add\":\r\n                    switch(decreeArray[1]){\r\n                         case\"player\":\r\n                              switch(decreeArray[2]){\r\n                                   case\"character\":\r\n                                   case\"character:\":\r\n                                        const newPlayer = decreeArray[3];\r\n                                        if(party.includes(newCharacter)){\r\n                                             const value = `${capitalize(newPlayer)} is already a member of your party.`;\r\n                                             setRoyalDecrees([...royalDecrees,\r\n                                                  {\r\n                                                       \"text\":value\r\n                                                  }\r\n                                             ]);\r\n                                        } else {\r\n                                             const value = `New player character: ${capitalize(newCharacter)}`;\r\n                                             setParty([...characters,\r\n                                                  {\r\n                                                       \"name\":newCharacter\r\n                                                  }\r\n                                             ]);\r\n                                             setRoyalDecrees([...royalDecrees,\r\n                                                  {\r\n                                                       \"text\":value\r\n                                                  }\r\n                                             ]);\r\n                                        }\r\n                                        break;\r\n                                   default:\r\n                                        spellFailed();\r\n                              }\r\n                              break;\r\n                         case\"npc\":\r\n                         case\"npc:\":\r\n                              const newNPC = decreeArray[3];\r\n                              if(NPCs.includes(newNPC)){\r\n                                   const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                        {\r\n                                             \"text\":value\r\n                                        }\r\n                                   ]);\r\n                              }\r\n                              const value = `New npc: ${newNPC}`;\r\n                              setNPCs([...characters,\r\n                                   {\r\n                                        \"name\":capitalize(newNPC)\r\n                                   }\r\n                              ]);\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"abucus\":\r\n               case\"calculate\":\r\n                    var result;\r\n                    var equation;\r\n                    var firstNum;\r\n                    var calculus;\r\n                    var secNum;\r\n                    if(decreeArray[1]){\r\n                         equation = decreeArray[1].split(\"\");\r\n                         firstNum = parseInt(equation[0]);\r\n                         calculus = equation[1];\r\n                         secNum = parseInt(equation[2]);\r\n                    }\r\n                    switch(calculus){\r\n                         case\"+\":\r\n                         case\"plus\":\r\n                              result = parseInt(firstNum+secNum);\r\n                              break;\r\n                         case\"-\":\r\n                         case\"minus\":\r\n                              result = parseInt(firstNum-secNum);\r\n                              break;\r\n                         case\"*\":\r\n                         case\"x\":\r\n                         case\"multiplied by\":\r\n                              result = parseInt(firstNum*secNum);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                         }\r\n                         if(result){\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":result\r\n                                   }\r\n                              ])\r\n                         }\r\n                    break;\r\n               case\"banana\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is bananas!`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"troglodyte\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is an uneducated troglodyte.`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"action\":\r\n               case\"action:\":\r\n                    let subject;\r\n                    for(let i = 0; i < characters.length; i++){\r\n                         if(decreeArray[1] === characters[i]){\r\n                              subject = capitalize(characters[i]);\r\n                         }\r\n                    }\r\n                    if(subject){\r\n                         switch(decreeArray[2]){\r\n                              case\"attack\":\r\n                              case\"attacks\":\r\n                              case\"attacked\":\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":`${subject} attacked ` + \"${object}\"\r\n                                   }]);\r\n                                   break;\r\n\r\n                         }\r\n                    }\r\n                    else{\r\n                         setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": `${capitalize(decreeArray[1])} is not a player`\r\n                         }]);\r\n                    }\r\n                    break;\r\n               default:\r\n                    spellFailed();\r\n          }\r\n          // saveData(royalDecrees[royalDecrees.length]);\r\n          decreeRef.current.value = \"\";\r\n     };\r\n     \r\n     return(\r\n          <div className=\"scroll-container\">\r\n               <h1 className=\"scroll-heading\">Decree Scroll</h1>\r\n               <div className=\"decree-scroll\">\r\n                    {royalDecrees.map((decree, index)=>{\r\n                    if(index >= royalDecrees.length-5)\r\n                         return(\r\n                              <div key={index}>\r\n                                   <p className=\"text-align-left\">{decree.text}</p>\r\n                                   {decree.value ? decree.value.map((value)=>{\r\n                                        return(\r\n                                             <div>\r\n                                                  {value}\r\n                                             </div>\r\n                                        );\r\n                                   }) : <p></p>}\r\n                              </div>\r\n                         )\r\n                         else return null;\r\n                    })}\r\n               </div>\r\n          <form onSubmit={submitDecree}>\r\n               <input className=\"col-12 decree-box\" name=\"DecreeBox\" ref={decreeRef} />\r\n          </form>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default RenderDungeon;"]},"metadata":{},"sourceType":"module"}
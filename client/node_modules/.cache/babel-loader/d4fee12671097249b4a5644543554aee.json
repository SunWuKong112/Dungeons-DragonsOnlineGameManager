{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyleg\\\\OneDrive\\\\Documents\\\\Coding Boot Camp\\\\Homework\\\\Dungeons-DragonsOnlineGameManager\\\\client\\\\src\\\\pages\\\\DmGamePage.js\";\nimport React, { useRef, useState } from \"react\";\nimport { pushBook } from \"../utils/api\";\nimport { getParty, makeBook, setScreenName } from \"../utils/api\";\n\nfunction RenderDungeon(stfNthngs) {\n  const bookId = getBook(stfNthngs.userId);\n  console.log(bookId);\n  let userName;\n\n  if (stfNthngs.userObj) {\n    userName = stfNthngs.userObj.screanName;\n  } else {\n    userName = stfNthngs.userId;\n  }\n\n  const [royalDecrees, setRoyalDecrees] = useState([]);\n  const gotBook = false;\n  let partyApi;\n  let npcApi;\n  let capIsSpecialApi;\n\n  if (gotBook) {\n    partyApi = getParty(); // npcApi = getNPCs();\n    // capIsSpecialApi = getCapIsSpecial();\n  } else {\n    partyApi = [\"tiffany\", \"kurt\", \"ass\", \"assballs69\", \"heathcliff\", \"ri'luaneth\"]; // npcApi = [{\"name\":\"reginald\",\"isHostile\":false},{\"name\":\"general_zod\",\"isHostile\":true}]\n    // capIsSpecialApi = [{\"name\":\"ri'luaneth\",\"cap\":\"Ri'Luaneth\"}];\n  }\n\n  const [party, setParty] = useState(partyApi);\n  const [NPCs, setNPCs] = useState(npcApi);\n  const [capIsSpecial, setCapSpecial] = useState(capIsSpecialApi);\n  const decreeRef = useRef();\n\n  function capitalize(word) {\n    for (let i = 0; i < capIsSpecial.length; i++) {\n      if (capIsSpecial[i].name == word) {\n        return capIsSpecial[i].cap;\n      }\n    }\n\n    word = word.split(\"_\");\n    let wordStore = [];\n    let wordFragment;\n\n    for (let i = 0; i < word.length; i++) {\n      wordFragment = word[i].split(\"\");\n      wordFragment[0] = wordFragment[0].toUpperCase();\n      wordFragment = wordFragment.join(\"\");\n      wordStore.push(wordFragment);\n    }\n\n    return wordStore.join(\"_\");\n  }\n\n  function saveBook() {\n    const Book = {\n      party,\n      NPCs,\n      capIsSpecial,\n      royalDecrees\n    };\n    pushBook(Book);\n  }\n\n  function spellFailed(error) {\n    const randomEvents = [\"You've just turned a player into a toad.\", \"Is... Is that a tiny rain cloud floating over your head...?\", \"Oh.... Now your hair is on fire...\", \"Are... Are you... Translucent...?\", \"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaand now it's raining...\"];\n    const length = randomEvents.length;\n    const randomEvent = Math.round(Math.random() * length) - 1;\n    const message = `You may need more practice. Please consult the spell book if you're having trouble.`;\n    let errorMessage;\n\n    if (error) {\n      errorMessage = `${error}${message}`;\n    } else {\n      errorMessage = message;\n    }\n\n    const decreefailed = `${randomEvents[randomEvent]} ${errorMessage}`;\n    setRoyalDecrees([...royalDecrees, {\n      \"text\": decreefailed\n    }]);\n  }\n\n  function submitDecree(e) {\n    e.preventDefault();\n    const orignalDecree = decreeRef.current.value.split(\" \");\n    const decreeTemp = decreeRef.current.value.toLowerCase();\n    const decreeArray = decreeTemp.split(\" \");\n\n    switch (decreeArray[0]) {\n      case \"roll\":\n        if (decreeArray[1]) {\n          const dice = decreeArray[1].split(\"d\");\n          const numOfDice = dice[0];\n          const numOfSides = dice[1];\n          let dieRollArray = [];\n          let sum = 0;\n          const rollRam = [];\n\n          for (let i = numOfDice; i--; i > 0) {\n            var random = Math.floor(Math.random() * numOfSides + 1);\n            rollRam.push(random);\n            dieRollArray.push(`d${numOfSides}: ${random}`);\n            sum += parseInt(random);\n          }\n\n          if (decreeArray[2] === \"drop\") {\n            let dropped;\n\n            switch (decreeArray[3]) {\n              case \"lowest\":\n                let lowest = sum;\n\n                for (let i = 0; i < rollRam.length; i++) {\n                  if (rollRam[i] < lowest) {\n                    lowest = rollRam[i];\n                  }\n                }\n\n                console.log(lowest, dieRollArray);\n                dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n                sum = sum - lowest;\n                break;\n\n              case \"highest\":\n                let highest = 0;\n\n                for (let i = 0; i < rollRam.length; i++) {\n                  if (rollRam[i] > highest) {\n                    highest = rollRam[i];\n                  }\n                }\n\n                dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n                sum = sum - highest;\n                break;\n\n              default:\n                break;\n            }\n\n            dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n          }\n\n          dieRollArray.push(`sum: ${sum}`);\n          const value = dieRollArray;\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": decreeRef.current.value,\n            \"value\": value\n          }]);\n        } else {\n          spellFailed(`Please recite the number of dice and the number of sides with the following incantation: \"roll (# of dice)d(# of sides)\". Do not use any spaces in between the numbers and the letter d.`);\n        }\n\n        break;\n\n      case \"add\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                if (decreeArray[3]) {\n                  const newPlayer = decreeArray[3];\n\n                  if (party.includes(newPlayer)) {\n                    const value = `${capitalize(newPlayer)} is already a member of your party.`;\n                    setRoyalDecrees([...royalDecrees, {\n                      \"text\": value\n                    }]);\n                  } else {\n                    switch (decreeArray[4]) {\n                      case \"special\":\n                        switch (decreeArray[5]) {\n                          case \"capitalize:\":\n                          case \"capital:\":\n                          case \"cap:\":\n                          case \"cap\":\n                          case \"capital\":\n                          case \"capitalize\":\n                          case \"capitalization\":\n                          case \"capitalization:\":\n                            setCapSpecial({\n                              \"cap\": orignalDecree[3],\n                              \"name\": decreeArray[3]\n                            });\n\n                          default:\n                        }\n\n                      default:\n                    }\n\n                    const value = `New player character: ${capitalize(newPlayer)}`;\n                    setParty([...party, {\n                      \"name\": newPlayer\n                    }]);\n                    setRoyalDecrees([...royalDecrees, {\n                      \"text\": value\n                    }]);\n                  }\n                } else {\n                  spellFailed(\"Please recite a player characters name when next you attempt this spell. \");\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"remove\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                const exitPlayer = decreeArray[3];\n\n                if (party.includes(exitPlayer)) {\n                  const index = party.indexOf(party);\n                  party.splice(index, 1);\n                  const value = `${capitalize(exitPlayer)} has left the party.`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                } else {\n                  const value = `${capitalize(exitPlayer)} is not a member of the party`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n            decreeArray[1] = `${decreeArray[1]}:`;\n\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"party\":\n        switch (decreeArray[1]) {\n          case \"members\":\n            decreeArray[1] = `members:`;\n\n          case \"members:\":\n            let value = `${capitalize(decreeArray[0])} ${decreeArray[1]} `;\n\n            for (let i = 0; i < party.length; i++) {\n              if (i == party.length - 1) {\n                value += ` and ${capitalize(party[i])}.`;\n              } else {\n                value += `${capitalize(party[i])}, `;\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"display\":\n        switch (decreeArray[1]) {\n          case \"npc:\":\n          case \"npc\":\n          case \"npcs\":\n          case \"npcs:\":\n            decreeArray[1] = `${decreeArray[1]} `;\n            let value = `${capitalize(decreeArray[1])}`;\n\n            if (NPCs.length == 2) {\n              value += `${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`;\n            } else {\n              for (let i = -1; i < NPCs.length; i++) {\n                if (NPCs[i] != null) {\n                  if (i == NPCs.length - 1) {\n                    value += ` and ${capitalize(NPCs[i].name)}.`;\n                    console.log(NPCs[i]);\n                  } else {\n                    value += `${capitalize(NPCs[i].name)}, `;\n                  }\n                }\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          case \"flavor\":\n            switch (decreeArray[2]) {\n              case \"text\":\n              case \"text:\":\n                let value = \"Flavor: \";\n\n                for (let i = 3; i < decreeArray.length; i++) {\n                  decreeArray[3] = capitalize(decreeArray[3]);\n\n                  for (let j = 0; j < party.length; j++) {\n                    switch (decreeArray[i]) {\n                      case party[j]:\n                        decreeArray[i] = capitalize(decreeArray[i]);\n                        break;\n\n                      default:\n                        const checkForPunc = decreeArray[i - 1].split(\"\");\n\n                        if (checkForPunc[checkForPunc.length - 1] === \".\" || checkForPunc[checkForPunc.length - 1] === \"!\" || checkForPunc[checkForPunc.length - 1] === \"?\") {\n                          decreeArray[i] = capitalize(decreeArray[i]);\n                        }\n\n                    }\n                  }\n\n                  value += ` ${decreeArray[i]}`;\n                }\n\n                const checkForPunc = value.split(\"\");\n\n                if (checkForPunc[checkForPunc.length - 1] != \".\" && checkForPunc[checkForPunc.length - 1] != \"!\" && checkForPunc[checkForPunc.length - 1] != \"?\") {\n                  value += \".\";\n                }\n\n                setRoyalDecrees([...royalDecrees, {\n                  \"text\": value\n                }]);\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"abucus\":\n      case \"abucus:\":\n      case \"calculate\":\n      case \"calculate:\":\n        var result;\n        var equation;\n        var firstNum;\n        let calculus;\n        var secNum;\n\n        if (decreeArray[1]) {\n          const findOperator = decreeArray[1].split(\"\");\n\n          for (let i = 0; i < findOperator.length; i++) {\n            if (isNaN(findOperator[i])) {\n              calculus = findOperator[i];\n            }\n          }\n\n          equation = decreeArray[1].split(calculus);\n          firstNum = parseInt(equation[0]);\n          secNum = parseInt(equation[1]);\n        }\n\n        switch (calculus) {\n          case \"+\":\n          case \"plus\":\n            result = parseInt(firstNum + secNum);\n            break;\n\n          case \"-\":\n          case \"minus\":\n            result = parseInt(firstNum - secNum);\n            break;\n\n          case \"*\":\n          case \"x\":\n          case \"multiplied by\":\n            result = parseInt(firstNum * secNum);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        if (result) {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": result\n          }]);\n        }\n\n        break;\n\n      case \"banana\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is bananas!`\n        }]);\n        break;\n\n      case \"troglodyte\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is an uneducated troglodyte.`\n        }]);\n        break;\n\n      case \"action\":\n      case \"action:\":\n        let subject;\n\n        for (let i = 0; i < party.length; i++) {\n          if (decreeArray[1] === party[i]) {\n            subject = party[i];\n          }\n        }\n\n        if (subject) {\n          switch (decreeArray[2]) {\n            case \"attack\":\n            case \"attacks\":\n            case \"attacked\":\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": `${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\n              }]);\n              break;\n          }\n        } else {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": `${capitalize(decreeArray[1])} is not a player`\n          }]);\n        }\n\n        break;\n\n      default:\n        if (party.includes(decreeArray[0])) {\n          switch (decreeArray[1]) {\n            case \"is\":\n              switch (decreeArray[2]) {\n                case \"poisoned\":\n                case \"poisoned.\":\n                  break;\n\n                default:\n                  spellFailed();\n              }\n\n              break;\n\n            case \"has\":\n              switch (decreeArray[2]) {\n                case \"special\":\n                  switch (decreeArray[3]) {\n                    case \"capitalization\":\n                    case \"capitalisation\":\n                    case \"capitalization.\":\n                    case \"capitalisation.\":\n                      let index;\n\n                      for (let i = 0; i < capIsSpecial.length; i++) {\n                        if (capIsSpecial[i].name == decreeArray[0]) {\n                          index = i;\n                        }\n                      }\n\n                      if (index) {\n                        let value = `${capitalize(decreeArray[0])} has special capitalization. Were you attempting to remove a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\n                        setRoyalDecrees([...royalDecrees, {\n                          \"text\": value\n                        }]);\n                      } else {\n                        let value = `${capitalize(orignalDecree[0])}'s new capitalization scheme has been set.`;\n                        setRoyalDecrees([...royalDecrees, {\n                          \"text\": value\n                        }]);\n                        setCapSpecial([...capIsSpecial, {\n                          \"name\": decreeArray[0],\n                          \"cap\": orignalDecree[0]\n                        }]);\n                      }\n\n                      break;\n\n                    default:\n                  }\n\n                  break;\n\n                case \"not\":\n                  switch (decreeArray[3]) {\n                    case \"special\":\n                      switch (decreeArray[4]) {\n                        case \"capitalization\":\n                        case \"capitalisation\":\n                        case \"capitalization.\":\n                        case \"capitalisation.\":\n                          let index;\n\n                          for (let i = 0; i < capIsSpecial.length; i++) {\n                            if (capIsSpecial[i].name == decreeArray[0]) {\n                              index = i;\n                            }\n                          }\n\n                          if (index) {\n                            capIsSpecial.splice(index);\n                            let value = `${capitalize(decreeArray[0])} has not special capitalization.`;\n                            setRoyalDecrees([...royalDecrees, {\n                              \"text\": value\n                            }]);\n                          } else {\n                            let value = `${capitalize(decreeArray[0])} has not special capitalization. Were you attempting to set a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\n                            setRoyalDecrees([...royalDecrees, {\n                              \"text\": value\n                            }]);\n                          }\n\n                          break;\n\n                        default:\n                          spellFailed();\n                      }\n\n                      break;\n\n                    default:\n                      spellFailed();\n                  }\n\n                  break;\n\n                default:\n                  spellFailed();\n              }\n\n              break;\n\n            default:\n              spellFailed();\n          }\n        } else {\n          spellFailed(\"\");\n        }\n\n    } // saveData(royalDecrees[royalDecrees.length]);\n\n\n    decreeRef.current.value = \"\";\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scroll-container table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"scroll-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 21\n    }\n  }, \"Decree Scroll\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"decree-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 21\n    }\n  }, royalDecrees.map((decree, index) => {\n    if (index >= royalDecrees.length - 30) return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 36\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 41\n      }\n    }, decree.text), decree.value ? decree.value.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 51\n        }\n      }, value);\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 46\n      }\n    }));else return null;\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitDecree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"col-12 decree-box\",\n    name: \"DecreeBox\",\n    ref: decreeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 26\n    }\n  }))));\n}\n\nexport default RenderDungeon;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/client/src/pages/DmGamePage.js"],"names":["React","useRef","useState","pushBook","getParty","makeBook","setScreenName","RenderDungeon","stfNthngs","bookId","getBook","userId","console","log","userName","userObj","screanName","royalDecrees","setRoyalDecrees","gotBook","partyApi","npcApi","capIsSpecialApi","party","setParty","NPCs","setNPCs","capIsSpecial","setCapSpecial","decreeRef","capitalize","word","i","length","name","cap","split","wordStore","wordFragment","toUpperCase","join","push","saveBook","Book","spellFailed","error","randomEvents","randomEvent","Math","round","random","message","errorMessage","decreefailed","submitDecree","e","preventDefault","orignalDecree","current","value","decreeTemp","toLowerCase","decreeArray","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","floor","parseInt","dropped","lowest","indexOf","highest","newPlayer","includes","newNPC","exitPlayer","index","splice","j","checkForPunc","result","equation","firstNum","calculus","secNum","findOperator","isNaN","subject","map","decree","text"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\nimport {pushBook} from \"../utils/api\";\r\nimport {getParty, makeBook, setScreenName} from \"../utils/api\";\r\n\r\nfunction RenderDungeon(stfNthngs){\r\n     const bookId = getBook(stfNthngs.userId);\r\n     console.log(bookId);\r\n     let userName;\r\n     if(stfNthngs.userObj){\r\n          userName = stfNthngs.userObj.screanName;\r\n     } else {\r\n          userName = stfNthngs.userId;\r\n     }\r\n     const [royalDecrees, setRoyalDecrees] = useState([]);\r\n     const gotBook = false;\r\n     let partyApi;\r\n     let npcApi;\r\n     let capIsSpecialApi;\r\n     if(gotBook){\r\n          partyApi = getParty();\r\n          // npcApi = getNPCs();\r\n          // capIsSpecialApi = getCapIsSpecial();\r\n     } else {\r\n          partyApi = [\"tiffany\",\"kurt\",\"ass\",\"assballs69\",\"heathcliff\",\"ri'luaneth\"];\r\n          // npcApi = [{\"name\":\"reginald\",\"isHostile\":false},{\"name\":\"general_zod\",\"isHostile\":true}]\r\n          // capIsSpecialApi = [{\"name\":\"ri'luaneth\",\"cap\":\"Ri'Luaneth\"}];\r\n     }\r\n     const [party, setParty] = useState(partyApi);\r\n     const [NPCs, setNPCs] = useState(npcApi);\r\n     const [capIsSpecial, setCapSpecial] = useState(capIsSpecialApi);\r\n     const decreeRef = useRef();\r\n\r\n     function capitalize(word){\r\n          for(let i = 0; i < capIsSpecial.length; i++){\r\n               if(capIsSpecial[i].name == word){\r\n                    return capIsSpecial[i].cap;\r\n               }\r\n          }\r\n          word = word.split(\"_\");\r\n          let wordStore=[];\r\n          let wordFragment;\r\n          for(let i = 0; i < word.length; i++){\r\n               wordFragment = word[i].split(\"\");\r\n               wordFragment[0] = wordFragment[0].toUpperCase();\r\n               wordFragment = wordFragment.join(\"\");\r\n               wordStore.push(wordFragment);\r\n          }\r\n          return wordStore.join(\"_\");\r\n     }\r\n\r\n     function saveBook(){\r\n          const Book = {party, NPCs, capIsSpecial, royalDecrees}\r\n          pushBook(Book);\r\n     }\r\n     \r\n     function spellFailed(error){\r\n          const randomEvents = [\"You've just turned a player into a toad.\",\"Is... Is that a tiny rain cloud floating over your head...?\",\"Oh.... Now your hair is on fire...\",\"Are... Are you... Translucent...?\",\"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaand now it's raining...\"];\r\n          const length = randomEvents.length;\r\n          const randomEvent = Math.round(Math.random()*length)-1;\r\n          const message = `You may need more practice. Please consult the spell book if you're having trouble.`;\r\n          let errorMessage;\r\n          if(error){\r\n               errorMessage = `${error}${message}`;\r\n          } else {\r\n               errorMessage = message;\r\n          }\r\n          const decreefailed = `${randomEvents[randomEvent]} ${errorMessage}`;\r\n          setRoyalDecrees([...royalDecrees,\r\n               {\r\n                    \"text\":decreefailed\r\n               }]);\r\n     }\r\n     \r\n     function submitDecree(e){\r\n          e.preventDefault();\r\n          const orignalDecree = decreeRef.current.value.split(\" \");\r\n          const decreeTemp = decreeRef.current.value.toLowerCase();\r\n          const decreeArray = decreeTemp.split(\" \");\r\n          switch(decreeArray[0]){\r\n               case\"roll\":\r\n                    if(decreeArray[1]){\r\n                         const dice = decreeArray[1].split(\"d\");\r\n                         const numOfDice = dice[0]\r\n                         const numOfSides = dice[1];\r\n                         let dieRollArray=[];\r\n                         let sum=0;\r\n                         const rollRam = [];\r\n                         for(let i = numOfDice; i--; i > 0)\r\n                         {\r\n                              var random = Math.floor((Math.random() * numOfSides) + 1);\r\n                              rollRam.push(random);\r\n                              dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                              sum+=parseInt(random);\r\n                         }\r\n                         if(decreeArray[2] === \"drop\"){\r\n                              let dropped;\r\n                              switch(decreeArray[3]){\r\n                                   case \"lowest\":\r\n                                        let lowest = sum;\r\n                                        for(let i = 0; i < rollRam.length; i++){\r\n                                             if(rollRam[i] < lowest){\r\n                                                  lowest = rollRam[i];\r\n                                             }\r\n                                        }\r\n                                        console.log(lowest, dieRollArray);\r\n                                        dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                                        sum = sum - lowest;\r\n                                        break;\r\n                                   case \"highest\":\r\n                                        let highest = 0;\r\n                                        for(let i = 0; i < rollRam.length; i++){\r\n                                             if(rollRam[i] > highest){\r\n                                                  highest = rollRam[i];\r\n                                             }\r\n                                        }\r\n                                        dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                                        sum = sum - highest;\r\n                                        break;\r\n                                   default:\r\n                                        break;\r\n                         }\r\n                         dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n                         }\r\n                         dieRollArray.push(`sum: ${sum}`);\r\n                         const value = dieRollArray;\r\n                         setRoyalDecrees([...royalDecrees,\r\n                              {\r\n                                   \"text\": decreeRef.current.value,\r\n                                   \"value\":value\r\n                              }\r\n                         ])\r\n                    } else {\r\n                         spellFailed(`Please recite the number of dice and the number of sides with the following incantation: \"roll (# of dice)d(# of sides)\". Do not use any spaces in between the numbers and the letter d.`);\r\n                    }\r\n                    break;\r\n               case\"add\":\r\n                    switch(decreeArray[1]){\r\n                         case\"player\":\r\n                              switch(decreeArray[2]){\r\n                                   case\"character\":\r\n                                   case\"character:\":\r\n                                        if(decreeArray[3]){\r\n                                             const newPlayer = decreeArray[3];\r\n                                             if(party.includes(newPlayer)){\r\n                                                  const value = `${capitalize(newPlayer)} is already a member of your party.`;\r\n                                                  setRoyalDecrees([...royalDecrees,\r\n                                                       {\r\n                                                            \"text\":value\r\n                                                       }\r\n                                                  ]);\r\n                                             } else {\r\n                                                  switch(decreeArray[4]){\r\n                                                       case\"special\":\r\n                                                            switch(decreeArray[5]){\r\n                                                                 case\"capitalize:\":\r\n                                                                 case\"capital:\":\r\n                                                                 case\"cap:\":\r\n                                                                 case\"cap\":\r\n                                                                 case\"capital\":\r\n                                                                 case\"capitalize\":\r\n                                                                 case\"capitalization\":\r\n                                                                 case\"capitalization:\":\r\n                                                                      setCapSpecial({\"cap\":orignalDecree[3],\"name\":decreeArray[3]});\r\n                                                                 default:\r\n                                                            }\r\n                                                       default:\r\n                                                  }\r\n                                                  const value = `New player character: ${capitalize(newPlayer)}`;\r\n                                                  setParty([...party,\r\n                                                       {\r\n                                                            \"name\":newPlayer\r\n                                                       }\r\n                                                  ]);\r\n                                                  setRoyalDecrees([...royalDecrees,\r\n                                                       {\r\n                                                            \"text\":value\r\n                                                       }\r\n                                                  ]);\r\n                                             }\r\n                                        } else {\r\n                                             spellFailed(\"Please recite a player characters name when next you attempt this spell. \");\r\n                                        }\r\n                                        break;\r\n                                   default:\r\n                                        spellFailed();\r\n                              }\r\n                              break;\r\n                         case\"npc\":\r\n                         case\"npc:\":\r\n                              const newNPC = decreeArray[3];\r\n                              if(NPCs.includes(newNPC)){\r\n                                   const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                        {\r\n                                             \"text\":value\r\n                                        }\r\n                                   ]);\r\n                              }\r\n                              const value = `New npc: ${newNPC}`;\r\n                              setNPCs([...NPCs,\r\n                                   {\r\n                                        \"name\":capitalize(newNPC)\r\n                                   }\r\n                              ]);\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"remove\":\r\n               switch(decreeArray[1]){\r\n                    case\"player\":\r\n                         switch(decreeArray[2]){\r\n                              case\"character\":\r\n                              case\"character:\":\r\n                                   const exitPlayer = decreeArray[3];\r\n                                   if(party.includes(exitPlayer)){\r\n                                        const index = party.indexOf(party);\r\n                                        party.splice(index, 1);\r\n                                        const value = `${capitalize(exitPlayer)} has left the party.`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   } else {\r\n                                        const value = `${capitalize(exitPlayer)} is not a member of the party`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   }\r\n                                   break;\r\n                              default:\r\n                                   spellFailed();\r\n                         }\r\n                         break;\r\n                    case\"npc\":\r\n                         decreeArray[1] = `${decreeArray[1]}:`\r\n                    case\"npc:\":\r\n                         const newNPC = decreeArray[3];\r\n                         if(NPCs.includes(newNPC)){\r\n                              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                         }\r\n                         const value = `New npc: ${newNPC}`;\r\n                         setNPCs([...NPCs,\r\n                              {\r\n                                   \"name\":capitalize(newNPC)\r\n                              }\r\n                         ]);\r\n                         setRoyalDecrees([...royalDecrees,\r\n                              {\r\n                                   \"text\":value\r\n                              }\r\n                         ]);\r\n                         break;\r\n                    default:\r\n                         spellFailed();\r\n                    }\r\n                    break;\r\n               case\"party\":\r\n                    switch(decreeArray[1]){\r\n                         case\"members\":\r\n                              decreeArray[1] = `members:`;\r\n                         case\"members:\":\r\n                              let value=`${capitalize(decreeArray[0])} ${decreeArray[1]} `;\r\n                              for(let i = 0; i < party.length; i++){\r\n                                   if(i == party.length-1){\r\n                                        value+=` and ${capitalize(party[i])}.`\r\n                                   } else {\r\n                                        value+=`${capitalize(party[i])}, `;\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"display\":\r\n                    switch(decreeArray[1]){\r\n                         case\"npc:\":\r\n                         case\"npc\":\r\n                         case\"npcs\":\r\n                         case\"npcs:\":\r\n                              decreeArray[1] = `${decreeArray[1]} `;\r\n                              let value=`${capitalize(decreeArray[1])}`;\r\n                              if(NPCs.length == 2){\r\n                                   value+=`${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`\r\n                              } else{\r\n                                   for(let i = -1; i < NPCs.length; i++){\r\n                                        if(NPCs[i] != null){\r\n                                             if(i == NPCs.length-1){\r\n                                                  value+=` and ${capitalize(NPCs[i].name)}.`\r\n                                                  console.log(NPCs[i]);\r\n                                             } else {\r\n                                                  value+=`${capitalize(NPCs[i].name)}, `;\r\n                                             }\r\n                                        }\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         case\"flavor\":\r\n                              switch(decreeArray[2]){\r\n                                   case\"text\":\r\n                                   case\"text:\":\r\n                                        let value=\"Flavor: \";\r\n                                        for(let i = 3; i < decreeArray.length; i++){\r\n                                             decreeArray[3] = capitalize(decreeArray[3]);\r\n                                             for(let j = 0; j < party.length; j++){\r\n                                                  switch(decreeArray[i]){\r\n                                                       case party[j]:\r\n                                                            decreeArray[i] = capitalize(decreeArray[i]);\r\n                                                            break;\r\n                                                       default:\r\n                                                            const checkForPunc = decreeArray[i-1].split(\"\");\r\n                                                            if(checkForPunc[checkForPunc.length-1] === \".\" || checkForPunc[checkForPunc.length-1] === \"!\" || checkForPunc[checkForPunc.length-1] === \"?\"){\r\n                                                                 decreeArray[i] = capitalize(decreeArray[i]);\r\n                                                            }\r\n                                                  }\r\n                                             }\r\n                                             value += ` ${decreeArray[i]}`;\r\n                                        }\r\n                                        const checkForPunc = value.split(\"\");\r\n                                        if(checkForPunc[checkForPunc.length-1] != \".\" && checkForPunc[checkForPunc.length-1] != \"!\" && checkForPunc[checkForPunc.length-1] != \"?\" ){\r\n                                             value+=\".\";\r\n                                        }\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                        break;\r\n                                   default:\r\n                                        spellFailed();\r\n                              }\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"abucus\":\r\n               case\"abucus:\":\r\n               case\"calculate\":\r\n               case\"calculate:\":\r\n                    var result;\r\n                    var equation;\r\n                    var firstNum;\r\n                    let calculus;\r\n                    var secNum;\r\n                    if(decreeArray[1]){\r\n                         const findOperator = decreeArray[1].split(\"\");\r\n                         for(let i = 0; i<findOperator.length; i++){\r\n                              if(isNaN(findOperator[i])){\r\n                                   calculus = findOperator[i];\r\n                              }\r\n                         }\r\n                         equation = decreeArray[1].split(calculus);\r\n                         firstNum = parseInt(equation[0]);\r\n                         secNum = parseInt(equation[1]);\r\n                    }\r\n                    switch(calculus){\r\n                         case\"+\":\r\n                         case\"plus\":\r\n                              result = parseInt(firstNum+secNum);\r\n                              break;\r\n                         case\"-\":\r\n                         case\"minus\":\r\n                              result = parseInt(firstNum-secNum);\r\n                              break;\r\n                         case\"*\":\r\n                         case\"x\":\r\n                         case\"multiplied by\":\r\n                              result = parseInt(firstNum*secNum);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                         }\r\n                         if(result){\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":result\r\n                                   }\r\n                              ])\r\n                         }\r\n                    break;\r\n               case\"banana\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is bananas!`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"troglodyte\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is an uneducated troglodyte.`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"action\":\r\n               case\"action:\":\r\n                    let subject;\r\n                    for(let i = 0; i < party.length; i++){\r\n                         if(decreeArray[1] === party[i]){\r\n                              subject = party[i];\r\n                         }\r\n                    }\r\n                    if(subject){\r\n                         switch(decreeArray[2]){\r\n                              case\"attack\":\r\n                              case\"attacks\":\r\n                              case\"attacked\":\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":`${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\r\n                                   }]);\r\n                                   break;\r\n\r\n                         }\r\n                    }\r\n                    else{\r\n                         setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": `${capitalize(decreeArray[1])} is not a player`\r\n                         }]);\r\n                    }\r\n                    break;\r\n               default:\r\n                    if(party.includes(decreeArray[0])){\r\n                         switch(decreeArray[1]){\r\n                              case\"is\":\r\n                                   switch(decreeArray[2]){\r\n                                        case\"poisoned\":\r\n                                        case\"poisoned.\":\r\n                                             break;\r\n                                        default:\r\n                                             spellFailed();\r\n                                   }\r\n                                   break;\r\n                              case\"has\":\r\n                                   switch(decreeArray[2]){\r\n                                        case\"special\":\r\n                                             switch(decreeArray[3]){\r\n                                                  case\"capitalization\":\r\n                                                  case\"capitalisation\":\r\n                                                  case\"capitalization.\":\r\n                                                  case\"capitalisation.\":\r\n                                                       let index;\r\n                                                            for(let i = 0; i < capIsSpecial.length; i++){\r\n                                                                 if(capIsSpecial[i].name == decreeArray[0]){\r\n                                                                      index = i;\r\n                                                                 }\r\n                                                            }\r\n                                                       if(index){\r\n                                                            let value = `${capitalize(decreeArray[0])} has special capitalization. Were you attempting to remove a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\r\n                                                            setRoyalDecrees([...royalDecrees,\r\n                                                                 {\r\n                                                                      \"text\":value\r\n                                                                 }]);\r\n                                                       } else {\r\n                                                            let value = `${capitalize(orignalDecree[0])}'s new capitalization scheme has been set.`;\r\n                                                            setRoyalDecrees([...royalDecrees,\r\n                                                                 {\r\n                                                                      \"text\":value\r\n                                                                 }]);\r\n                                                            setCapSpecial([...capIsSpecial,\r\n                                                                 {\r\n                                                                      \"name\":decreeArray[0],\r\n                                                                      \"cap\":orignalDecree[0]\r\n                                                                 }]);\r\n                                                       }\r\n                                                       break;\r\n                                                  default:\r\n                                                  }\r\n                                             break;\r\n                                        case\"not\":\r\n                                             switch(decreeArray[3]){\r\n                                                  case\"special\":\r\n                                                       switch(decreeArray[4]){\r\n                                                            case\"capitalization\":\r\n                                                            case\"capitalisation\":\r\n                                                            case\"capitalization.\":\r\n                                                            case\"capitalisation.\":\r\n                                                                 let index;\r\n                                                                 for(let i = 0; i < capIsSpecial.length; i++){\r\n                                                                      if(capIsSpecial[i].name == decreeArray[0]){\r\n                                                                           index = i;\r\n                                                                      }\r\n                                                                 }\r\n                                                                 if(index){\r\n                                                                      capIsSpecial.splice(index);\r\n                                                                      let value = `${capitalize(decreeArray[0])} has not special capitalization.`;\r\n                                                                      setRoyalDecrees([...royalDecrees,\r\n                                                                           {\r\n                                                                                \"text\":value\r\n                                                                           }]);\r\n                                                                 } else {\r\n                                                                      let value = `${capitalize(decreeArray[0])} has not special capitalization. Were you attempting to set a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\r\n                                                                      setRoyalDecrees([...royalDecrees,\r\n                                                                           {\r\n                                                                                \"text\":value\r\n                                                                           }]);\r\n                                                                 }\r\n                                                                 break;\r\n                                                            default:\r\n                                                                 spellFailed();          \r\n                                                       }\r\n                                                       break;\r\n                                                  default:\r\n                                                       spellFailed();\r\n                                                  }\r\n                                             break;\r\n                                        default:\r\n                                             spellFailed();\r\n                                   }\r\n                                   break;\r\n                              default:\r\n                                   spellFailed();\r\n                         }\r\n                    } else {\r\n                         spellFailed(\"\");\r\n                    }\r\n          }\r\n          // saveData(royalDecrees[royalDecrees.length]);\r\n          decreeRef.current.value = \"\";\r\n     };\r\n     \r\n     return(\r\n          <div className=\"table\">\r\n               <div className=\"scroll-container table\">\r\n                    <h1 className=\"scroll-heading\">Decree Scroll</h1>\r\n                    <div className=\"decree-scroll\">\r\n                         {royalDecrees.map((decree, index)=>{\r\n                         if(index >= royalDecrees.length-30)\r\n                              return(\r\n                                   <div key={index}>\r\n                                        <p className=\"text-align-left\">{decree.text}</p>\r\n                                        {decree.value ? decree.value.map((value)=>{\r\n                                             return(\r\n                                                  <div>\r\n                                                       {value}\r\n                                                  </div>\r\n                                             );\r\n                                        }) : <p></p>}\r\n                                   </div>\r\n                              )\r\n                              else return null;\r\n                         })}\r\n                    </div>\r\n                    <form onSubmit={submitDecree}>\r\n                         <input className=\"col-12 decree-box\" name=\"DecreeBox\" ref={decreeRef} />\r\n                    </form>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default RenderDungeon;"]},"metadata":{},"sourceType":"module"}
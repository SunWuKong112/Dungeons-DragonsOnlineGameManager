{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyleg\\\\OneDrive\\\\Documents\\\\Coding Boot Camp\\\\Homework\\\\Dungeons-DragonsOnlineGameManager\\\\client\\\\src\\\\pages\\\\DmGamePage.js\";\nimport React, { useRef, useState } from \"react\";\n\nfunction RenderDungeon() {\n  const [royalDecrees, setRoyalDecrees] = useState([]);\n  const [party, setParty] = useState([\"tiffany\", \"kurt\", \"ass\", \"assballs69\", \"heathcliff\", \"ri'luaneth\"]);\n  const [NPCs, setNPCs] = useState([{\n    \"name\": \"reginald\",\n    \"isHostile\": false\n  }, {\n    \"name\": \"general_zod\",\n    \"isHostile\": true\n  }]);\n  const [capIsSpecial, setCapSpecial] = useState([{\n    \"name\": \"ri'luaneth\",\n    \"cap\": \"Ri'Luaneth\"\n  }]);\n  const decreeRef = useRef();\n\n  function capitalize(word) {\n    for (let i = 0; i < capIsSpecial.length; i++) {\n      if (capIsSpecial[i].name == word) {\n        return capIsSpecial[i].cap;\n      }\n    }\n\n    word = word.split(\"_\");\n    let wordStore = [];\n    let wordFragment;\n\n    for (let i = 0; i < word.length; i++) {\n      wordFragment = word[i].split(\"\");\n      wordFragment[0] = wordFragment[0].toUpperCase();\n      wordFragment = wordFragment.join(\"\");\n      wordStore.push(wordFragment);\n    }\n\n    return wordStore.join(\"_\");\n  }\n\n  function spellFailed(error) {\n    const randomEvents = [\"You've just turned a player into a toad.\", \"Is... Is that a tiny rain cloud floating over your head...?\", \"Oh.... now your hair is on fire...\", \"RandomEvent4.\"];\n    const length = randomEvents.length;\n    const randomEvent = Math.round(Math.random() * length);\n    const message = `You may need more practice. Please consult the spell book if you're having trouble.`;\n    let errorMessage;\n\n    if (error) {\n      errorMessage = `${error}${message}`;\n    } else {\n      errorMessage = message;\n    }\n\n    const decreefailed = `${randomEvents[randomEvent]} ${errorMessage}`;\n    setRoyalDecrees([...royalDecrees, {\n      \"text\": decreefailed\n    }]);\n  }\n\n  function submitDecree(e) {\n    e.preventDefault();\n    const orignalDecree = decreeRef.current.value.split(\" \");\n    const decreeTemp = decreeRef.current.value.toLowerCase();\n    const decreeArray = decreeTemp.split(\" \");\n\n    switch (decreeArray[0]) {\n      case \"roll\":\n        const dice = decreeArray[1].split(\"d\");\n        const numOfDice = dice[0];\n        const numOfSides = dice[1];\n        let dieRollArray = [];\n        let sum = 0;\n        const rollRam = [];\n\n        for (let i = numOfDice; i--; i > 0) {\n          var random = Math.floor(Math.random() * numOfSides + 1);\n          rollRam.push(random);\n          dieRollArray.push(`d${numOfSides}: ${random}`);\n          sum += parseInt(random);\n        }\n\n        if (decreeArray[2] === \"drop\") {\n          let dropped;\n\n          switch (decreeArray[3]) {\n            case \"lowest\":\n              let lowest = sum;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] < lowest) {\n                  lowest = rollRam[i];\n                }\n              }\n\n              console.log(lowest, dieRollArray);\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n              sum = sum - lowest;\n              break;\n\n            case \"highest\":\n              let highest = 0;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] > highest) {\n                  highest = rollRam[i];\n                }\n              }\n\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n              sum = sum - highest;\n              break;\n\n            default:\n              break;\n          }\n\n          dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n        }\n\n        dieRollArray.push(`sum: ${sum}`);\n        const value = dieRollArray;\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": decreeRef.current.value,\n          \"value\": value\n        }]);\n        break;\n\n      case \"add\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                if (decreeArray[3]) {\n                  const newPlayer = decreeArray[3];\n\n                  if (party.includes(newPlayer)) {\n                    const value = `${capitalize(newPlayer)} is already a member of your party.`;\n                    setRoyalDecrees([...royalDecrees, {\n                      \"text\": value\n                    }]);\n                  } else {\n                    switch (decreeArray[4]) {\n                      case \"special\":\n                        switch (decreeArray[5]) {\n                          case \"capitalize:\":\n                          case \"capital:\":\n                          case \"cap:\":\n                          case \"cap\":\n                          case \"capital\":\n                          case \"capitalize\":\n                          case \"capitalization\":\n                          case \"capitalization:\":\n                            setCapSpecial({\n                              \"cap\": orignalDecree[3],\n                              \"name\": decreeArray[3]\n                            });\n\n                          default:\n                        }\n\n                      default:\n                    }\n\n                    const value = `New player character: ${capitalize(newPlayer)}`;\n                    setParty([...party, {\n                      \"name\": newPlayer\n                    }]);\n                    setRoyalDecrees([...royalDecrees, {\n                      \"text\": value\n                    }]);\n                  }\n                } else {\n                  spellFailed(\"Please recite a player characters name when next you attempt this spell. \");\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"remove\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                const exitPlayer = decreeArray[3];\n\n                if (party.includes(exitPlayer)) {\n                  const index = party.indexOf(party);\n                  party.splice(index, 1);\n                  const value = `${capitalize(exitPlayer)} has left the party.`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                } else {\n                  const value = `${capitalize(exitPlayer)} is not a member of the party`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n            decreeArray[1] = `${decreeArray[1]}:`;\n\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"party\":\n        switch (decreeArray[1]) {\n          case \"members\":\n            decreeArray[1] = `members:`;\n\n          case \"members:\":\n            let value = `${capitalize(decreeArray[0])} ${decreeArray[1]} `;\n\n            for (let i = 0; i < party.length; i++) {\n              if (i == party.length - 1) {\n                value += ` and ${capitalize(party[i])}.`;\n              } else {\n                value += `${capitalize(party[i])}, `;\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"display\":\n        switch (decreeArray[1]) {\n          case \"npc:\":\n          case \"npc\":\n          case \"npcs\":\n          case \"npcs:\":\n            decreeArray[1] = `${decreeArray[1]} `;\n            let value = `${capitalize(decreeArray[1])}`;\n\n            if (NPCs.length == 2) {\n              value += `${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`;\n            } else {\n              for (let i = -1; i < NPCs.length; i++) {\n                if (NPCs[i] != null) {\n                  if (i == NPCs.length - 1) {\n                    value += ` and ${capitalize(NPCs[i].name)}.`;\n                    console.log(NPCs[i]);\n                  } else {\n                    value += `${capitalize(NPCs[i].name)}, `;\n                  }\n                }\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"abucus\":\n      case \"calculate\":\n        var result;\n        var equation;\n        var firstNum;\n        var calculus;\n        var secNum;\n\n        if (decreeArray[1]) {\n          equation = decreeArray[1].split(\"\");\n          firstNum = parseInt(equation[0]);\n          calculus = equation[1];\n          secNum = parseInt(equation[2]);\n        }\n\n        switch (calculus) {\n          case \"+\":\n          case \"plus\":\n            result = parseInt(firstNum + secNum);\n            break;\n\n          case \"-\":\n          case \"minus\":\n            result = parseInt(firstNum - secNum);\n            break;\n\n          case \"*\":\n          case \"x\":\n          case \"multiplied by\":\n            result = parseInt(firstNum * secNum);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        if (result) {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": result\n          }]);\n        }\n\n        break;\n\n      case \"banana\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is bananas!`\n        }]);\n        break;\n\n      case \"troglodyte\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is an uneducated troglodyte.`\n        }]);\n        break;\n\n      case \"action\":\n      case \"action:\":\n        let subject;\n\n        for (let i = 0; i < party.length; i++) {\n          if (decreeArray[1] === party[i]) {\n            subject = party[i];\n          }\n        }\n\n        if (subject) {\n          switch (decreeArray[2]) {\n            case \"attack\":\n            case \"attacks\":\n            case \"attacked\":\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": `${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\n              }]);\n              break;\n          }\n        } else {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": `${capitalize(decreeArray[1])} is not a player`\n          }]);\n        }\n\n        break;\n\n      default:\n        if (party.includes(decreeArray[0])) {\n          switch (decreeArray[1]) {\n            case \"is\":\n              switch (decreeArray[2]) {\n                case \"poisoned\":\n                case \"poisoned.\":\n                  break;\n\n                default:\n                  spellFailed();\n              }\n\n              break;\n\n            case \"has\":\n              switch (decreeArray[2]) {\n                case \"special\":\n                  switch (decreeArray[3]) {\n                    case \"capitalization\":\n                    case \"capitalisation\":\n                    case \"capitalization.\":\n                    case \"capitalisation.\":\n                      let index;\n\n                      for (let i = 0; i < capIsSpecial.length; i++) {\n                        if (capIsSpecial[i].name == decreeArray[0]) {\n                          index = i;\n                        }\n                      }\n\n                      if (index) {\n                        let value = `${capitalize(decreeArray[0])} has special capitalization. Were you attempting to remove a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\n                        setRoyalDecrees([...royalDecrees, {\n                          \"text\": value\n                        }]);\n                      } else {\n                        let value = `${capitalize(orignalDecree[0])}'s new capitalization scheme has been set.`;\n                        setRoyalDecrees([...royalDecrees, {\n                          \"text\": value\n                        }]);\n                        setCapSpecial([...capIsSpecial, {\n                          \"name\": decreeArray[0],\n                          \"cap\": orignalDecree[0]\n                        }]);\n                      }\n\n                      break;\n\n                    default:\n                  }\n\n                  break;\n\n                case \"not\":\n                  switch (decreeArray[3]) {\n                    case \"special\":\n                      switch (decreeArray[4]) {\n                        case \"capitalization\":\n                        case \"capitalisation\":\n                        case \"capitalization.\":\n                        case \"capitalisation.\":\n                          let index;\n\n                          for (let i = 0; i < capIsSpecial.length; i++) {\n                            if (capIsSpecial[i].name == decreeArray[0]) {\n                              index = i;\n                            }\n                          }\n\n                          if (index) {\n                            capIsSpecial.splice(index);\n                            let value = `${capitalize(decreeArray[0])} has not special capitalization.`;\n                            setRoyalDecrees([...royalDecrees, {\n                              \"text\": value\n                            }]);\n                          } else {\n                            let value = `${capitalize(decreeArray[0])} has not special capitalization. Were you attempting to set a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\n                            setRoyalDecrees([...royalDecrees, {\n                              \"text\": value\n                            }]);\n                          }\n\n                          break;\n\n                        default:\n                          spellFailed();\n                      }\n\n                      break;\n\n                    default:\n                      spellFailed();\n                  }\n\n                  break;\n\n                default:\n                  spellFailed();\n              }\n\n              break;\n\n            default:\n              spellFailed();\n          }\n        } else {\n          spellFailed();\n        }\n\n    } // saveData(royalDecrees[royalDecrees.length]);\n\n\n    decreeRef.current.value = \"\";\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scroll-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"scroll-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 16\n    }\n  }, \"Decree Scroll\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"decree-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 16\n    }\n  }, royalDecrees.map((decree, index) => {\n    if (index >= royalDecrees.length - 30) return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 36\n      }\n    }, decree.text), decree.value ? decree.value.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 46\n        }\n      }, value);\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 41\n      }\n    }));else return null;\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitDecree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"col-12 decree-box\",\n    name: \"DecreeBox\",\n    ref: decreeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 16\n    }\n  })));\n}\n\nexport default RenderDungeon;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/client/src/pages/DmGamePage.js"],"names":["React","useRef","useState","RenderDungeon","royalDecrees","setRoyalDecrees","party","setParty","NPCs","setNPCs","capIsSpecial","setCapSpecial","decreeRef","capitalize","word","i","length","name","cap","split","wordStore","wordFragment","toUpperCase","join","push","spellFailed","error","randomEvents","randomEvent","Math","round","random","message","errorMessage","decreefailed","submitDecree","e","preventDefault","orignalDecree","current","value","decreeTemp","toLowerCase","decreeArray","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","floor","parseInt","dropped","lowest","console","log","indexOf","highest","newPlayer","includes","newNPC","exitPlayer","index","splice","result","equation","firstNum","calculus","secNum","subject","map","decree","text"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\n\r\nfunction RenderDungeon(){\r\n     const [royalDecrees, setRoyalDecrees] = useState([]);\r\n     const [party, setParty] = useState([\"tiffany\",\"kurt\",\"ass\",\"assballs69\",\"heathcliff\",\"ri'luaneth\"]);\r\n     const [NPCs, setNPCs] = useState([{\"name\":\"reginald\",\"isHostile\":false},{\"name\":\"general_zod\",\"isHostile\":true}]);\r\n     const [capIsSpecial, setCapSpecial] = useState([{\"name\":\"ri'luaneth\",\"cap\":\"Ri'Luaneth\"}]);\r\n     const decreeRef = useRef();\r\n\r\n     function capitalize(word){\r\n          for(let i = 0; i < capIsSpecial.length; i++){\r\n               if(capIsSpecial[i].name == word){\r\n                    return capIsSpecial[i].cap;\r\n               }\r\n          }\r\n          word = word.split(\"_\");\r\n          let wordStore=[];\r\n          let wordFragment;\r\n          for(let i = 0; i < word.length; i++){\r\n               wordFragment = word[i].split(\"\");\r\n               wordFragment[0] = wordFragment[0].toUpperCase();\r\n               wordFragment = wordFragment.join(\"\");\r\n               wordStore.push(wordFragment);\r\n          }\r\n          return wordStore.join(\"_\");\r\n     }\r\n     \r\n     function spellFailed(error){\r\n          const randomEvents = [\"You've just turned a player into a toad.\",\"Is... Is that a tiny rain cloud floating over your head...?\",\"Oh.... now your hair is on fire...\",\"RandomEvent4.\"];\r\n          const length = randomEvents.length;\r\n          const randomEvent = Math.round(Math.random()*length);\r\n          const message = `You may need more practice. Please consult the spell book if you're having trouble.`;\r\n          let errorMessage;\r\n          if(error){\r\n               errorMessage = `${error}${message}`;\r\n          } else {\r\n               errorMessage = message;\r\n          }\r\n          const decreefailed = `${randomEvents[randomEvent]} ${errorMessage}`;\r\n          setRoyalDecrees([...royalDecrees,\r\n               {\r\n                    \"text\":decreefailed\r\n               }]);\r\n     }\r\n     \r\n     function submitDecree(e){\r\n          e.preventDefault();\r\n          const orignalDecree = decreeRef.current.value.split(\" \");\r\n          const decreeTemp = decreeRef.current.value.toLowerCase();\r\n          const decreeArray = decreeTemp.split(\" \");\r\n          switch(decreeArray[0]){\r\n               case\"roll\":\r\n                    const dice = decreeArray[1].split(\"d\");\r\n                    const numOfDice = dice[0]\r\n                    const numOfSides = dice[1];\r\n                    let dieRollArray=[];\r\n                    let sum=0;\r\n                    const rollRam = [];\r\n                    for(let i = numOfDice; i--; i > 0)\r\n                    {\r\n                         var random = Math.floor((Math.random() * numOfSides) + 1);\r\n                         rollRam.push(random);\r\n                         dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                         sum+=parseInt(random);\r\n                    }\r\n                    if(decreeArray[2] === \"drop\"){\r\n                         let dropped;\r\n                         switch(decreeArray[3]){\r\n                              case \"lowest\":\r\n                                   let lowest = sum;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] < lowest){\r\n                                             lowest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   console.log(lowest, dieRollArray);\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                                   sum = sum - lowest;\r\n                                   break;\r\n                              case \"highest\":\r\n                                   let highest = 0;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] > highest){\r\n                                             highest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                                   sum = sum - highest;\r\n                                   break;\r\n                              default:\r\n                                   break;\r\n                         }\r\n                         dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n                    }\r\n                    dieRollArray.push(`sum: ${sum}`);\r\n                    const value = dieRollArray;\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": decreeRef.current.value,\r\n                              \"value\":value\r\n                         }\r\n                    ])\r\n                    break;\r\n               case\"add\":\r\n                    switch(decreeArray[1]){\r\n                         case\"player\":\r\n                              switch(decreeArray[2]){\r\n                                   case\"character\":\r\n                                   case\"character:\":\r\n                                        if(decreeArray[3]){\r\n                                             const newPlayer = decreeArray[3];\r\n                                             if(party.includes(newPlayer)){\r\n                                                  const value = `${capitalize(newPlayer)} is already a member of your party.`;\r\n                                                  setRoyalDecrees([...royalDecrees,\r\n                                                       {\r\n                                                            \"text\":value\r\n                                                       }\r\n                                                  ]);\r\n                                             } else {\r\n                                                  switch(decreeArray[4]){\r\n                                                       case\"special\":\r\n                                                            switch(decreeArray[5]){\r\n                                                                 case\"capitalize:\":\r\n                                                                 case\"capital:\":\r\n                                                                 case\"cap:\":\r\n                                                                 case\"cap\":\r\n                                                                 case\"capital\":\r\n                                                                 case\"capitalize\":\r\n                                                                 case\"capitalization\":\r\n                                                                 case\"capitalization:\":\r\n                                                                      setCapSpecial({\"cap\":orignalDecree[3],\"name\":decreeArray[3]});\r\n                                                                 default:\r\n                                                            }\r\n                                                       default:\r\n                                                  }\r\n                                                  const value = `New player character: ${capitalize(newPlayer)}`;\r\n                                                  setParty([...party,\r\n                                                       {\r\n                                                            \"name\":newPlayer\r\n                                                       }\r\n                                                  ]);\r\n                                                  setRoyalDecrees([...royalDecrees,\r\n                                                       {\r\n                                                            \"text\":value\r\n                                                       }\r\n                                                  ]);\r\n                                             }\r\n                                        } else {\r\n                                             spellFailed(\"Please recite a player characters name when next you attempt this spell. \");\r\n                                        }\r\n                                        break;\r\n                                   default:\r\n                                        spellFailed();\r\n                              }\r\n                              break;\r\n                         case\"npc\":\r\n                         case\"npc:\":\r\n                              const newNPC = decreeArray[3];\r\n                              if(NPCs.includes(newNPC)){\r\n                                   const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                        {\r\n                                             \"text\":value\r\n                                        }\r\n                                   ]);\r\n                              }\r\n                              const value = `New npc: ${newNPC}`;\r\n                              setNPCs([...NPCs,\r\n                                   {\r\n                                        \"name\":capitalize(newNPC)\r\n                                   }\r\n                              ]);\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"remove\":\r\n               switch(decreeArray[1]){\r\n                    case\"player\":\r\n                         switch(decreeArray[2]){\r\n                              case\"character\":\r\n                              case\"character:\":\r\n                                   const exitPlayer = decreeArray[3];\r\n                                   if(party.includes(exitPlayer)){\r\n                                        const index = party.indexOf(party);\r\n                                        party.splice(index, 1);\r\n                                        const value = `${capitalize(exitPlayer)} has left the party.`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   } else {\r\n                                        const value = `${capitalize(exitPlayer)} is not a member of the party`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   }\r\n                                   break;\r\n                              default:\r\n                                   spellFailed();\r\n                         }\r\n                         break;\r\n                    case\"npc\":\r\n                         decreeArray[1] = `${decreeArray[1]}:`\r\n                    case\"npc:\":\r\n                         const newNPC = decreeArray[3];\r\n                         if(NPCs.includes(newNPC)){\r\n                              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                         }\r\n                         const value = `New npc: ${newNPC}`;\r\n                         setNPCs([...NPCs,\r\n                              {\r\n                                   \"name\":capitalize(newNPC)\r\n                              }\r\n                         ]);\r\n                         setRoyalDecrees([...royalDecrees,\r\n                              {\r\n                                   \"text\":value\r\n                              }\r\n                         ]);\r\n                         break;\r\n                    default:\r\n                         spellFailed();\r\n                    }\r\n                    break;\r\n               case\"party\":\r\n                    switch(decreeArray[1]){\r\n                         case\"members\":\r\n                              decreeArray[1] = `members:`;\r\n                         case\"members:\":\r\n                              let value=`${capitalize(decreeArray[0])} ${decreeArray[1]} `;\r\n                              for(let i = 0; i < party.length; i++){\r\n                                   if(i == party.length-1){\r\n                                        value+=` and ${capitalize(party[i])}.`\r\n                                   } else {\r\n                                        value+=`${capitalize(party[i])}, `;\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"display\":\r\n                    switch(decreeArray[1]){\r\n                         case\"npc:\":\r\n                         case\"npc\":\r\n                         case\"npcs\":\r\n                         case\"npcs:\":\r\n                              decreeArray[1] = `${decreeArray[1]} `;\r\n                              let value=`${capitalize(decreeArray[1])}`;\r\n                              if(NPCs.length == 2){\r\n                                   value+=`${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`\r\n                              } else{\r\n                                   for(let i = -1; i < NPCs.length; i++){\r\n                                        if(NPCs[i] != null){\r\n                                             if(i == NPCs.length-1){\r\n                                                  value+=` and ${capitalize(NPCs[i].name)}.`\r\n                                                  console.log(NPCs[i]);\r\n                                             } else {\r\n                                                  value+=`${capitalize(NPCs[i].name)}, `;\r\n                                             }\r\n                                        }\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                    }\r\n                    break;\r\n               case\"abucus\":\r\n               case\"calculate\":\r\n                    var result;\r\n                    var equation;\r\n                    var firstNum;\r\n                    var calculus;\r\n                    var secNum;\r\n                    if(decreeArray[1]){\r\n                         equation = decreeArray[1].split(\"\");\r\n                         firstNum = parseInt(equation[0]);\r\n                         calculus = equation[1];\r\n                         secNum = parseInt(equation[2]);\r\n                    }\r\n                    switch(calculus){\r\n                         case\"+\":\r\n                         case\"plus\":\r\n                              result = parseInt(firstNum+secNum);\r\n                              break;\r\n                         case\"-\":\r\n                         case\"minus\":\r\n                              result = parseInt(firstNum-secNum);\r\n                              break;\r\n                         case\"*\":\r\n                         case\"x\":\r\n                         case\"multiplied by\":\r\n                              result = parseInt(firstNum*secNum);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                         }\r\n                         if(result){\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":result\r\n                                   }\r\n                              ])\r\n                         }\r\n                    break;\r\n               case\"banana\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is bananas!`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"troglodyte\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is an uneducated troglodyte.`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"action\":\r\n               case\"action:\":\r\n                    let subject;\r\n                    for(let i = 0; i < party.length; i++){\r\n                         if(decreeArray[1] === party[i]){\r\n                              subject = party[i];\r\n                         }\r\n                    }\r\n                    if(subject){\r\n                         switch(decreeArray[2]){\r\n                              case\"attack\":\r\n                              case\"attacks\":\r\n                              case\"attacked\":\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":`${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\r\n                                   }]);\r\n                                   break;\r\n\r\n                         }\r\n                    }\r\n                    else{\r\n                         setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": `${capitalize(decreeArray[1])} is not a player`\r\n                         }]);\r\n                    }\r\n                    break;\r\n               default:\r\n                    if(party.includes(decreeArray[0])){\r\n                         switch(decreeArray[1]){\r\n                              case\"is\":\r\n                                   switch(decreeArray[2]){\r\n                                        case\"poisoned\":\r\n                                        case\"poisoned.\":\r\n                                             break;\r\n                                        default:\r\n                                             spellFailed();\r\n                                   }\r\n                                   break;\r\n                              case\"has\":\r\n                                   switch(decreeArray[2]){\r\n                                        case\"special\":\r\n                                             switch(decreeArray[3]){\r\n                                                  case\"capitalization\":\r\n                                                  case\"capitalisation\":\r\n                                                  case\"capitalization.\":\r\n                                                  case\"capitalisation.\":\r\n                                                       let index;\r\n                                                            for(let i = 0; i < capIsSpecial.length; i++){\r\n                                                                 if(capIsSpecial[i].name == decreeArray[0]){\r\n                                                                      index = i;\r\n                                                                 }\r\n                                                            }\r\n                                                       if(index){\r\n                                                            let value = `${capitalize(decreeArray[0])} has special capitalization. Were you attempting to remove a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\r\n                                                            setRoyalDecrees([...royalDecrees,\r\n                                                                 {\r\n                                                                      \"text\":value\r\n                                                                 }]);\r\n                                                       } else {\r\n                                                            let value = `${capitalize(orignalDecree[0])}'s new capitalization scheme has been set.`;\r\n                                                            setRoyalDecrees([...royalDecrees,\r\n                                                                 {\r\n                                                                      \"text\":value\r\n                                                                 }]);\r\n                                                            setCapSpecial([...capIsSpecial,\r\n                                                                 {\r\n                                                                      \"name\":decreeArray[0],\r\n                                                                      \"cap\":orignalDecree[0]\r\n                                                                 }]);\r\n                                                       }\r\n                                                       break;\r\n                                                  default:\r\n                                                  }\r\n                                             break;\r\n                                        case\"not\":\r\n                                             switch(decreeArray[3]){\r\n                                                  case\"special\":\r\n                                                       switch(decreeArray[4]){\r\n                                                            case\"capitalization\":\r\n                                                            case\"capitalisation\":\r\n                                                            case\"capitalization.\":\r\n                                                            case\"capitalisation.\":\r\n                                                                 let index;\r\n                                                                 for(let i = 0; i < capIsSpecial.length; i++){\r\n                                                                      if(capIsSpecial[i].name == decreeArray[0]){\r\n                                                                           index = i;\r\n                                                                      }\r\n                                                                 }\r\n                                                                 if(index){\r\n                                                                      capIsSpecial.splice(index);\r\n                                                                      let value = `${capitalize(decreeArray[0])} has not special capitalization.`;\r\n                                                                      setRoyalDecrees([...royalDecrees,\r\n                                                                           {\r\n                                                                                \"text\":value\r\n                                                                           }]);\r\n                                                                 } else {\r\n                                                                      let value = `${capitalize(decreeArray[0])} has not special capitalization. Were you attempting to set a special capitalization scheme for ${capitalize(decreeArray[0])}?`;\r\n                                                                      setRoyalDecrees([...royalDecrees,\r\n                                                                           {\r\n                                                                                \"text\":value\r\n                                                                           }]);\r\n                                                                 }\r\n                                                                 break;\r\n                                                            default:\r\n                                                                 spellFailed();          \r\n                                                       }\r\n                                                       break;\r\n                                                  default:\r\n                                                       spellFailed();\r\n                                                  }\r\n                                             break;\r\n                                        default:\r\n                                             spellFailed();\r\n                                   }\r\n                                   break;\r\n                              default:\r\n                                   spellFailed();\r\n                         }\r\n                    } else {\r\n                         spellFailed();\r\n                    }\r\n          }\r\n          // saveData(royalDecrees[royalDecrees.length]);\r\n          decreeRef.current.value = \"\";\r\n     };\r\n     \r\n     return(\r\n          <div className=\"scroll-container\">\r\n               <h1 className=\"scroll-heading\">Decree Scroll</h1>\r\n               <div className=\"decree-scroll\">\r\n                    {royalDecrees.map((decree, index)=>{\r\n                    if(index >= royalDecrees.length-30)\r\n                         return(\r\n                              <div key={index}>\r\n                                   <p className=\"text-align-left\">{decree.text}</p>\r\n                                   {decree.value ? decree.value.map((value)=>{\r\n                                        return(\r\n                                             <div>\r\n                                                  {value}\r\n                                             </div>\r\n                                        );\r\n                                   }) : <p></p>}\r\n                              </div>\r\n                         )\r\n                         else return null;\r\n                    })}\r\n               </div>\r\n          <form onSubmit={submitDecree}>\r\n               <input className=\"col-12 decree-box\" name=\"DecreeBox\" ref={decreeRef} />\r\n          </form>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default RenderDungeon;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyleg\\\\OneDrive\\\\Documents\\\\Coding Boot Camp\\\\Homework\\\\Dungeons-DragonsOnlineGameManager\\\\dungeons-n-dragons\\\\src\\\\pages\\\\DmGamePage.js\";\nimport React, { useRef, useState } from \"react\";\n\nfunction RenderDungeon() {\n  const [royalDecrees, setRoyalDecrees] = useState([]);\n  const [party, setParty] = useState([\"tiffany\", \"kurt\", \"ass\", \"assballs69\", \"Heathcliff\", \"ri'luaneth\"]);\n  const [NPCs, setNPCs] = useState([{\n    \"name\": \"reginald\",\n    \"isHostile\": false\n  }, {\n    \"name\": \"general_zod\",\n    \"isHostile\": true\n  }]);\n  const [capIsSpecial, setCapSpecial] = useState([{\n    \"ri'luaneth\": {\n      cap: \"Ri'Luaneth\"\n    }\n  }]);\n  const decreeRef = useRef();\n\n  function capitalize(word) {\n    if (capIsSpecial.indexOf(word)) {} else {\n      word = word.split(\"_\");\n      let wordStore = [];\n      let wordFragment;\n\n      for (let i = 0; i < word.length; i++) {\n        wordFragment = word[i].split(\"\");\n        wordFragment[0] = wordFragment[0].toUpperCase();\n        wordFragment = wordFragment.join(\"\");\n        wordStore.push(wordFragment);\n      }\n\n      return wordStore.join(\"_\");\n    }\n  }\n\n  function spellFailed() {\n    const randomEvents = [\"You've just turned a player into a toad.\", \"Is... Is that a tiny rain cloud floating over your head...?\", \"Oh.... now your hair is on fire...\", \"RandomEvent4.\"];\n    const length = randomEvents.length;\n    const randomEvent = Math.round(Math.random() * length);\n    const decreefailed = `${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\n    setRoyalDecrees([...royalDecrees, {\n      \"text\": decreefailed\n    }]);\n  }\n\n  function submitDecree(e) {\n    e.preventDefault();\n    const decreeTemp = decreeRef.current.value.toLowerCase();\n    const decreeArray = decreeTemp.split(\" \");\n\n    switch (decreeArray[0]) {\n      case \"roll\":\n        const dice = decreeArray[1].split(\"d\");\n        const numOfDice = dice[0];\n        const numOfSides = dice[1];\n        let dieRollArray = [];\n        let sum = 0;\n        const rollRam = [];\n\n        for (let i = numOfDice; i--; i > 0) {\n          var random = Math.floor(Math.random() * numOfSides + 1);\n          rollRam.push(random);\n          dieRollArray.push(`d${numOfSides}: ${random}`);\n          sum += parseInt(random);\n        }\n\n        if (decreeArray[2] === \"drop\") {\n          let dropped;\n\n          switch (decreeArray[3]) {\n            case \"lowest\":\n              let lowest = sum;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] < lowest) {\n                  lowest = rollRam[i];\n                }\n              }\n\n              console.log(lowest, dieRollArray);\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\n              sum = sum - lowest;\n              break;\n\n            case \"highest\":\n              let highest = 0;\n\n              for (let i = 0; i < rollRam.length; i++) {\n                if (rollRam[i] > highest) {\n                  highest = rollRam[i];\n                }\n              }\n\n              dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\n              sum = sum - highest;\n              break;\n\n            default:\n              break;\n          }\n\n          dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\n        }\n\n        dieRollArray.push(`sum: ${sum}`);\n        const value = dieRollArray;\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": decreeRef.current.value,\n          \"value\": value\n        }]);\n        break;\n\n      case \"add\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                const newPlayer = decreeArray[3];\n\n                if (party.includes(newPlayer)) {\n                  const value = `${capitalize(newPlayer)} is already a member of your party.`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                } else {\n                  const value = `New player character: ${capitalize(newPlayer)}`;\n                  setParty([...party, {\n                    \"name\": newPlayer\n                  }]);\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"remove\":\n        switch (decreeArray[1]) {\n          case \"player\":\n            switch (decreeArray[2]) {\n              case \"character\":\n              case \"character:\":\n                const exitPlayer = decreeArray[3];\n\n                if (party.includes(exitPlayer)) {\n                  const index = party.indexOf(party);\n                  party.splice(index, 1);\n                  const value = `${capitalize(exitPlayer)} has left the party.`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                } else {\n                  const value = `${capitalize(exitPlayer)} is not a member of the party`;\n                  setRoyalDecrees([...royalDecrees, {\n                    \"text\": value\n                  }]);\n                }\n\n                break;\n\n              default:\n                spellFailed();\n            }\n\n            break;\n\n          case \"npc\":\n            decreeArray[1] = `${decreeArray[1]}:`;\n\n          case \"npc:\":\n            const newNPC = decreeArray[3];\n\n            if (NPCs.includes(newNPC)) {\n              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": value\n              }]);\n            }\n\n            const value = `New npc: ${newNPC}`;\n            setNPCs([...NPCs, {\n              \"name\": capitalize(newNPC)\n            }]);\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        break;\n\n      case \"party\":\n        switch (decreeArray[1]) {\n          case \"members\":\n            decreeArray[1] = `${decreeArray[1]}:`;\n\n          case \"members:\":\n            let value = `${capitalize(decreeArray[0])} ${decreeArray[1]}`;\n\n            for (let i = -1; i < party.length; i++) {\n              if (party[i] != null) {\n                if (i == party.length - 1) {\n                  value += ` and ${capitalize(party[i])}.`;\n                } else {\n                  value += `${capitalize(party[i])}, `;\n                }\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"display\":\n        switch (decreeArray[1]) {\n          case \"npc:\":\n            decreeArray[1] = decreeArray[1].split(\":\");\n\n          case \"npc\":\n            decreeArray[1] = `${decreeArray[1]}s`;\n\n          case \"npcs\":\n            decreeArray[1] = `${decreeArray[1]}:`;\n\n          case \"npcs:\":\n            decreeArray[1] = `${decreeArray[1]} `;\n            let value = `${capitalize(decreeArray[1])}`;\n\n            if (NPCs.length == 2) {\n              value += `${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`;\n            } else {\n              for (let i = -1; i < NPCs.length; i++) {\n                if (NPCs[i] != null) {\n                  if (i == NPCs.length - 1) {\n                    value += ` and ${capitalize(NPCs[i].name)}.`;\n                    console.log(NPCs[i]);\n                  } else {\n                    value += `${capitalize(NPCs[i].name)}, `;\n                  }\n                }\n              }\n            }\n\n            setRoyalDecrees([...royalDecrees, {\n              \"text\": value\n            }]);\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"abucus\":\n      case \"calculate\":\n        var result;\n        var equation;\n        var firstNum;\n        var calculus;\n        var secNum;\n\n        if (decreeArray[1]) {\n          equation = decreeArray[1].split(\"\");\n          firstNum = parseInt(equation[0]);\n          calculus = equation[1];\n          secNum = parseInt(equation[2]);\n        }\n\n        switch (calculus) {\n          case \"+\":\n          case \"plus\":\n            result = parseInt(firstNum + secNum);\n            break;\n\n          case \"-\":\n          case \"minus\":\n            result = parseInt(firstNum - secNum);\n            break;\n\n          case \"*\":\n          case \"x\":\n          case \"multiplied by\":\n            result = parseInt(firstNum * secNum);\n            break;\n\n          default:\n            spellFailed();\n        }\n\n        if (result) {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": result\n          }]);\n        }\n\n        break;\n\n      case \"banana\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is bananas!`\n        }]);\n        break;\n\n      case \"troglodyte\":\n        var name = decreeArray[1];\n        name = capitalize(name);\n        setRoyalDecrees([...royalDecrees, {\n          \"text\": `${name} is an uneducated troglodyte.`\n        }]);\n        break;\n\n      case \"action\":\n      case \"action:\":\n        let subject;\n\n        for (let i = 0; i < party.length; i++) {\n          if (decreeArray[1] === party[i]) {\n            subject = party[i];\n          }\n        }\n\n        if (subject) {\n          switch (decreeArray[2]) {\n            case \"attack\":\n            case \"attacks\":\n            case \"attacked\":\n              setRoyalDecrees([...royalDecrees, {\n                \"text\": `${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\n              }]);\n              break;\n          }\n        } else {\n          setRoyalDecrees([...royalDecrees, {\n            \"text\": `${capitalize(decreeArray[1])} is not a player`\n          }]);\n        }\n\n        break;\n\n      default:\n        spellFailed();\n    } // saveData(royalDecrees[royalDecrees.length]);\n\n\n    decreeRef.current.value = \"\";\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scroll-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"scroll-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 16\n    }\n  }, \"Decree Scroll\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"decree-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 16\n    }\n  }, royalDecrees.map((decree, index) => {\n    if (index >= royalDecrees.length - 5) return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 36\n      }\n    }, decree.text), decree.value ? decree.value.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 46\n        }\n      }, value);\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 41\n      }\n    }));else return null;\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitDecree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"col-12 decree-box\",\n    name: \"DecreeBox\",\n    ref: decreeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 16\n    }\n  })));\n}\n\nexport default RenderDungeon;","map":{"version":3,"sources":["C:/Users/kyleg/OneDrive/Documents/Coding Boot Camp/Homework/Dungeons-DragonsOnlineGameManager/dungeons-n-dragons/src/pages/DmGamePage.js"],"names":["React","useRef","useState","RenderDungeon","royalDecrees","setRoyalDecrees","party","setParty","NPCs","setNPCs","capIsSpecial","setCapSpecial","cap","decreeRef","capitalize","word","indexOf","split","wordStore","wordFragment","i","length","toUpperCase","join","push","spellFailed","randomEvents","randomEvent","Math","round","random","decreefailed","submitDecree","e","preventDefault","decreeTemp","current","value","toLowerCase","decreeArray","dice","numOfDice","numOfSides","dieRollArray","sum","rollRam","floor","parseInt","dropped","lowest","console","log","highest","newPlayer","includes","newNPC","exitPlayer","index","splice","name","result","equation","firstNum","calculus","secNum","subject","map","decree","text"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\n\r\nfunction RenderDungeon(){\r\n     const [royalDecrees, setRoyalDecrees] = useState([]);\r\n     const [party, setParty] = useState([\"tiffany\",\"kurt\",\"ass\",\"assballs69\",\"Heathcliff\",\"ri'luaneth\"]);\r\n     const [NPCs, setNPCs] = useState([{\"name\":\"reginald\",\"isHostile\":false},{\"name\":\"general_zod\",\"isHostile\":true}]);\r\n     const [capIsSpecial, setCapSpecial] = useState([{\"ri'luaneth\":{cap:\"Ri'Luaneth\"}}]);\r\n     const decreeRef = useRef();\r\n\r\n     function capitalize(word){\r\n          if(capIsSpecial.indexOf(word)){\r\n               \r\n          } else {\r\n               word = word.split(\"_\");\r\n               let wordStore=[];\r\n               let wordFragment;\r\n               for(let i = 0; i < word.length; i++){\r\n                    wordFragment = word[i].split(\"\");\r\n                    wordFragment[0] = wordFragment[0].toUpperCase();\r\n                    wordFragment = wordFragment.join(\"\");\r\n                    wordStore.push(wordFragment);\r\n               }\r\n               return wordStore.join(\"_\");\r\n          }\r\n     }\r\n     \r\n     function spellFailed(){\r\n          const randomEvents = [\"You've just turned a player into a toad.\",\"Is... Is that a tiny rain cloud floating over your head...?\",\"Oh.... now your hair is on fire...\",\"RandomEvent4.\"];\r\n          const length = randomEvents.length;\r\n          const randomEvent = Math.round(Math.random()*length);\r\n          const decreefailed = `${randomEvents[randomEvent]} You may need more practice. Please consult the spell book if you're having trouble.`;\r\n          setRoyalDecrees([...royalDecrees,\r\n               {\r\n                    \"text\":decreefailed\r\n               }]);\r\n     }\r\n     \r\n     function submitDecree(e){\r\n          e.preventDefault();\r\n          const decreeTemp = decreeRef.current.value.toLowerCase();\r\n          const decreeArray = decreeTemp.split(\" \");\r\n          switch(decreeArray[0]){\r\n               case\"roll\":\r\n                    const dice = decreeArray[1].split(\"d\");\r\n                    const numOfDice = dice[0]\r\n                    const numOfSides = dice[1];\r\n                    let dieRollArray=[];\r\n                    let sum=0;\r\n                    const rollRam = [];\r\n                    for(let i = numOfDice; i--; i > 0)\r\n                    {\r\n                         var random = Math.floor((Math.random() * numOfSides) + 1);\r\n                         rollRam.push(random);\r\n                         dieRollArray.push(`d${numOfSides}: ${random}`);\r\n                         sum+=parseInt(random);\r\n                    }\r\n                    if(decreeArray[2] === \"drop\"){\r\n                         let dropped;\r\n                         switch(decreeArray[3]){\r\n                              case \"lowest\":\r\n                                   let lowest = sum;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] < lowest){\r\n                                             lowest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   console.log(lowest, dieRollArray);\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${lowest}`);\r\n                                   sum = sum - lowest;\r\n                                   break;\r\n                              case \"highest\":\r\n                                   let highest = 0;\r\n                                   for(let i = 0; i < rollRam.length; i++){\r\n                                        if(rollRam[i] > highest){\r\n                                             highest = rollRam[i];\r\n                                        }\r\n                                   }\r\n                                   dropped = dieRollArray.indexOf(`d${numOfSides}: ${highest}`);\r\n                                   sum = sum - highest;\r\n                                   break;\r\n                              default:\r\n                                   break;\r\n                         }\r\n                         dieRollArray[dropped] = `${dieRollArray[dropped]} (dropped)`;\r\n                    }\r\n                    dieRollArray.push(`sum: ${sum}`);\r\n                    const value = dieRollArray;\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": decreeRef.current.value,\r\n                              \"value\":value\r\n                         }\r\n                    ])\r\n                    break;\r\n               case\"add\":\r\n                    switch(decreeArray[1]){\r\n                         case\"player\":\r\n                              switch(decreeArray[2]){\r\n                                   case\"character\":\r\n                                   case\"character:\":\r\n                                        const newPlayer = decreeArray[3];\r\n                                        if(party.includes(newPlayer)){\r\n                                             const value = `${capitalize(newPlayer)} is already a member of your party.`;\r\n                                             setRoyalDecrees([...royalDecrees,\r\n                                                  {\r\n                                                       \"text\":value\r\n                                                  }\r\n                                             ]);\r\n                                        } else {\r\n                                             const value = `New player character: ${capitalize(newPlayer)}`;\r\n                                             setParty([...party,\r\n                                                  {\r\n                                                       \"name\":newPlayer\r\n                                                  }\r\n                                             ]);\r\n                                             setRoyalDecrees([...royalDecrees,\r\n                                                  {\r\n                                                       \"text\":value\r\n                                                  }\r\n                                             ]);\r\n                                        }\r\n                                        break;\r\n                                   default:\r\n                                        spellFailed();\r\n                              }\r\n                              break;\r\n                         case\"npc\":\r\n                         case\"npc:\":\r\n                              const newNPC = decreeArray[3];\r\n                              if(NPCs.includes(newNPC)){\r\n                                   const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                        {\r\n                                             \"text\":value\r\n                                        }\r\n                                   ]);\r\n                              }\r\n                              const value = `New npc: ${newNPC}`;\r\n                              setNPCs([...NPCs,\r\n                                   {\r\n                                        \"name\":capitalize(newNPC)\r\n                                   }\r\n                              ]);\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                    }\r\n                    break;\r\n               case\"remove\":\r\n               switch(decreeArray[1]){\r\n                    case\"player\":\r\n                         switch(decreeArray[2]){\r\n                              case\"character\":\r\n                              case\"character:\":\r\n                                   const exitPlayer = decreeArray[3];\r\n                                   if(party.includes(exitPlayer)){\r\n                                        const index = party.indexOf(party);\r\n                                        party.splice(index, 1);\r\n                                        const value = `${capitalize(exitPlayer)} has left the party.`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   } else {\r\n                                        const value = `${capitalize(exitPlayer)} is not a member of the party`;\r\n                                        setRoyalDecrees([...royalDecrees,\r\n                                             {\r\n                                                  \"text\":value\r\n                                             }\r\n                                        ]);\r\n                                   }\r\n                                   break;\r\n                              default:\r\n                                   spellFailed();\r\n                         }\r\n                         break;\r\n                    case\"npc\":\r\n                         decreeArray[1] = `${decreeArray[1]}:`\r\n                    case\"npc:\":\r\n                         const newNPC = decreeArray[3];\r\n                         if(NPCs.includes(newNPC)){\r\n                              const value = `${capitalize(newNPC)} is already a member of a non player character.`;\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                         }\r\n                         const value = `New npc: ${newNPC}`;\r\n                         setNPCs([...NPCs,\r\n                              {\r\n                                   \"name\":capitalize(newNPC)\r\n                              }\r\n                         ]);\r\n                         setRoyalDecrees([...royalDecrees,\r\n                              {\r\n                                   \"text\":value\r\n                              }\r\n                         ]);\r\n                         break;\r\n                    default:\r\n                         spellFailed();\r\n                    }\r\n                    break;\r\n               case\"party\":\r\n                    switch(decreeArray[1]){\r\n                         case\"members\":\r\n                         decreeArray[1] = `${decreeArray[1]}:`;\r\n                         case\"members:\":\r\n                              let value=`${capitalize(decreeArray[0])} ${decreeArray[1]}`;\r\n                              for(let i = -1; i < party.length; i++){\r\n                                   if(party[i] != null){\r\n                                        if(i == party.length-1){\r\n                                             value+=` and ${capitalize(party[i])}.`\r\n                                        } else {\r\n                                             value+=`${capitalize(party[i])}, `;\r\n                                        }\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                    }\r\n                    break;\r\n               case\"display\":\r\n                    switch(decreeArray[1]){\r\n                         case\"npc:\":\r\n                              decreeArray[1] = decreeArray[1].split(\":\");\r\n                         case\"npc\":\r\n                              decreeArray[1] = `${decreeArray[1]}s`;\r\n                         case\"npcs\":\r\n                              decreeArray[1] = `${decreeArray[1]}:`;\r\n                         case\"npcs:\":\r\n                              decreeArray[1] = `${decreeArray[1]} `;\r\n                              let value=`${capitalize(decreeArray[1])}`;\r\n                              if(NPCs.length == 2){\r\n                                   value+=`${capitalize(NPCs[0].name)} and ${capitalize(NPCs[1].name)}.`\r\n                              } else{\r\n                                   for(let i = -1; i < NPCs.length; i++){\r\n                                        if(NPCs[i] != null){\r\n                                             if(i == NPCs.length-1){\r\n                                                  value+=` and ${capitalize(NPCs[i].name)}.`\r\n                                                  console.log(NPCs[i]);\r\n                                             } else {\r\n                                                  value+=`${capitalize(NPCs[i].name)}, `;\r\n                                             }\r\n                                        }\r\n                                   }\r\n                              }\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":value\r\n                                   }\r\n                              ]);\r\n                              break;\r\n                         default:\r\n                    }\r\n                    break;\r\n               case\"abucus\":\r\n               case\"calculate\":\r\n                    var result;\r\n                    var equation;\r\n                    var firstNum;\r\n                    var calculus;\r\n                    var secNum;\r\n                    if(decreeArray[1]){\r\n                         equation = decreeArray[1].split(\"\");\r\n                         firstNum = parseInt(equation[0]);\r\n                         calculus = equation[1];\r\n                         secNum = parseInt(equation[2]);\r\n                    }\r\n                    switch(calculus){\r\n                         case\"+\":\r\n                         case\"plus\":\r\n                              result = parseInt(firstNum+secNum);\r\n                              break;\r\n                         case\"-\":\r\n                         case\"minus\":\r\n                              result = parseInt(firstNum-secNum);\r\n                              break;\r\n                         case\"*\":\r\n                         case\"x\":\r\n                         case\"multiplied by\":\r\n                              result = parseInt(firstNum*secNum);\r\n                              break;\r\n                         default:\r\n                              spellFailed();\r\n                         }\r\n                         if(result){\r\n                              setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":result\r\n                                   }\r\n                              ])\r\n                         }\r\n                    break;\r\n               case\"banana\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is bananas!`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"troglodyte\":\r\n                    var name = decreeArray[1];\r\n                    name = capitalize(name);\r\n                    setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\":`${name} is an uneducated troglodyte.`\r\n                         }\r\n                    ]);\r\n                    break;\r\n               case\"action\":\r\n               case\"action:\":\r\n                    let subject;\r\n                    for(let i = 0; i < party.length; i++){\r\n                         if(decreeArray[1] === party[i]){\r\n                              subject = party[i];\r\n                         }\r\n                    }\r\n                    if(subject){\r\n                         switch(decreeArray[2]){\r\n                              case\"attack\":\r\n                              case\"attacks\":\r\n                              case\"attacked\":\r\n                                   setRoyalDecrees([...royalDecrees,\r\n                                   {\r\n                                        \"text\":`${capitalize(subject)} attacked ` + \"${capitalize(object)}\"\r\n                                   }]);\r\n                                   break;\r\n\r\n                         }\r\n                    }\r\n                    else{\r\n                         setRoyalDecrees([...royalDecrees,\r\n                         {\r\n                              \"text\": `${capitalize(decreeArray[1])} is not a player`\r\n                         }]);\r\n                    }\r\n                    break;\r\n               default:\r\n                    spellFailed();\r\n          }\r\n          // saveData(royalDecrees[royalDecrees.length]);\r\n          decreeRef.current.value = \"\";\r\n     };\r\n     \r\n     return(\r\n          <div className=\"scroll-container\">\r\n               <h1 className=\"scroll-heading\">Decree Scroll</h1>\r\n               <div className=\"decree-scroll\">\r\n                    {royalDecrees.map((decree, index)=>{\r\n                    if(index >= royalDecrees.length-5)\r\n                         return(\r\n                              <div key={index}>\r\n                                   <p className=\"text-align-left\">{decree.text}</p>\r\n                                   {decree.value ? decree.value.map((value)=>{\r\n                                        return(\r\n                                             <div>\r\n                                                  {value}\r\n                                             </div>\r\n                                        );\r\n                                   }) : <p></p>}\r\n                              </div>\r\n                         )\r\n                         else return null;\r\n                    })}\r\n               </div>\r\n          <form onSubmit={submitDecree}>\r\n               <input className=\"col-12 decree-box\" name=\"DecreeBox\" ref={decreeRef} />\r\n          </form>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default RenderDungeon;"]},"metadata":{},"sourceType":"module"}